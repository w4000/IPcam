MODULE_NAME = kflow_ctl_ipp
# DIRs
VOS_DRIVER_DIR = $(NVT_VOS_DIR)/drivers
KDRV_DIR = $(NVT_HDAL_DIR)/drivers/k_driver
KFLOW_DIR = $(NVT_HDAL_DIR)/drivers/k_flow
CURR_DRIVER_DIR = $(KFLOW_DIR)
RTOS_OUTPUT_DIR = $(CURR_DRIVER_DIR)/output
KFLOW_CTL_IPP_DIR = $(CURR_DRIVER_DIR)/source/kflow_videoprocess/ctl
# INCs
VOS_INC_PATH = $(VOS_DRIVER_DIR)/include
KDRV_INC_PATH = $(KDRV_DIR)/include
KFLOW_INC_PATH = $(KFLOW_DIR)/include
CURR_DRIVER_INC_PATH = $(CURR_DRIVER_DIR)/include
CTL_IPP_COM_INC_PATH = $(KFLOW_CTL_IPP_DIR)/include
CTL_IPP_DBG_INC_PATH = $(KFLOW_CTL_IPP_DIR)/ipp_debug
CTL_IPP_UTI_INC_PATH = $(KFLOW_CTL_IPP_DIR)/ipp_utility
CTL_IPP_FLOW_INC_PATH = $(KFLOW_CTL_IPP_DIR)/ipp_flow
# INC FLAGs
EXTRA_INCLUDE += -I$(VOS_INC_PATH) -I$(KDRV_INC_PATH) -I$(KFLOW_INC_PATH) -I$(CURR_DRIVER_INC_PATH) -I$(CTL_IPP_COM_INC_PATH) -I$(CTL_IPP_DBG_INC_PATH) -I$(CTL_IPP_UTI_INC_PATH) -I$(CTL_IPP_FLOW_INC_PATH)
.PHONY: modules modules_install clean
###############################################################################
# Linux Makefile                                                              #
###############################################################################
ifeq ($(NVT_PRJCFG_CFG),Linux)
C_CFLAGS  += -D__LINUX -Werror

EXTRA_CFLAGS += $(C_CFLAGS) $(EXTRA_INCLUDE) -Wno-date-time  -I$(src)/include -DDEBUG
KBUILD_EXTRA_SYMBOLS = $(shell find $(VOS_DRIVER_DIR) -name Module.symvers) $(shell find $(KDRV_DIR) -name Module.symvers) $(shell find $(KFLOW_DIR) -name Module.symvers)

obj-m += $(MODULE_NAME).o
$(MODULE_NAME)-objs := \
	ctl_ipp_main.o \
	ctl_ipp_proc.o \
	ctl_ipp_drv.o \
	ctl_ipp_api.o \
	ctl_ipp_verinfo.o \
	ipp_utility/ctl_ipp_util.o \
	ipp_utility/ipp_event_id.o \
	ipp_utility/ipp_event.o \
	ipp_flow/kdf_ipp_id.o \
	ipp_flow/kdf_ipp_int.o \
	ipp_flow/kdf_ipp.o \
	ipp_flow/ctl_ipp_isp_int.o \
	ipp_flow/ctl_ipp_isp.o \
	ipp_flow/ctl_ipp_buf.o \
	ipp_flow/ctl_ipp_id.o \
	ipp_flow/ctl_ipp_int.o \
	ipp_flow/ctl_ipp.o \
	ipp_flow/ctl_ipp_flow_task.o \
	ipp_debug/ipp_debug_int.o \

ifeq ($(KERNELRELEASE),)
PWD := $(shell pwd)
KERVER ?= $(NVT_LINUX_VER)
KDIR ?= $(KERNELDIR)
MDIR ?= $(KERNELDIR)/_install_modules/lib/modules/$(KERVER)/hdal
MODPATH := $(shell echo $(PWD) | awk -F'source/' '{print $$NF}';)
MODNAME := $(shell echo $(obj-m:.o=.ko))

modules:
	@$(MAKE) -C $(KDIR) M=$(PWD) modules

modules_install:
	@if [ -z $(NVT_MOD_INSTALL) ]; then \
		rm -f $(MDIR)/$(MODPATH)/$(MODNAME); \
		install -m644 -b -D $(MODNAME) ${MDIR}/$(MODPATH)/$(MODNAME); \
		cd $(KDIR)/_install_modules/lib/modules/$(KERVER)/; depmod -b $(KDIR)/_install_modules/ -a $(KERVER); \
	else \
		mkdir -p $(NVT_MOD_INSTALL)/lib/modules/$(KERVER); \
		install -m644 -b -D $(MODNAME) $(NVT_MOD_INSTALL)/lib/modules/$(KERVER)/hdal/$(MODPATH)/$(MODNAME); \
	fi

clean:
	@SRC="`find . -name  "*.c" ! -name "*.mod.c"`"; \
	if [ "$$SRC" ]; then \
		rm -rf .tmp_versions Module.symvers modules.order `find . -type f -name "*.mod.c" -o -name ".*.cmd" -o -name "*.o" -o -name "*.ko" -o -name "modules.order" -o -name *~`; \
	else \
		rm -rf .tmp_versions Module.symvers modules.order $(MODULE_NAME).o $(MODULE_NAME).mod.o `find . -type f -name "*.mod.c" -o -name ".*.cmd" -o -name "*.ko" -o -name "modules.order" -o -name *~`; \
	fi
endif

###############################################################################
# rtos Makefile                                                               #
###############################################################################
else ifeq ($(NVT_PRJCFG_CFG),rtos)
OUTPUT_NAME = lib$(MODULE_NAME).a
C_CFLAGS = $(PLATFORM_CFLAGS) $(EXTRA_INCLUDE) -DDEBUG -I$(CURDIR)/include

SRC = \
	ipp_debug/ipp_debug_int.c \
	ipp_utility/ctl_ipp_util.c \
	ipp_utility/ipp_event_id.c \
	ipp_utility/ipp_event.c \
	ipp_flow/kdf_ipp_id.c \
	ipp_flow/kdf_ipp_int.c \
	ipp_flow/kdf_ipp.c \
	ipp_flow/ctl_ipp_isp_int.c \
	ipp_flow/ctl_ipp_isp.c \
	ipp_flow/ctl_ipp_buf.c \
	ipp_flow/ctl_ipp_id.c \
	ipp_flow/ctl_ipp_int.c \
	ipp_flow/ctl_ipp.c \
	ipp_flow/ctl_ipp_flow_task.c \
	ctl_ipp_api.c \

copy = if [ ! -z "$(1)" -a "$(1)" != " " ]; then cp -avf $(1) $(2); fi

OBJ = $(SRC:.c=.o)

ifeq ("$(wildcard *.c */*.c */*/*.c)","")
modules:
	@echo "nothing to be done for '$(OUTPUT_NAME)'"
clean:
	@echo "nothing to be done for '$(OUTPUT_NAME)'"
else
modules : $(OUTPUT_NAME)

%.o:%.c
	@echo Compiling $<
	@$(CC) $(C_CFLAGS) -c $< -o $@

$(OUTPUT_NAME): $(OBJ)
	@echo Creating library $* ...
	@$(AR) rcsD $(OUTPUT_NAME) $(OBJ)
	@$(BUILD_DIR)/nvt-tools/nvt-ld-op --arc-sha1 $@

clean:
	@rm -f $(OBJ) *.o *.a *.so*
endif

modules_install:
	@mkdir -p $(RTOS_OUTPUT_DIR)
	@cp -avf *.a $(RTOS_OUTPUT_DIR)

endif

