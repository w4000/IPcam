/*
    Copyright   Novatek Microelectronics Corp. 2005~2014.  All rights reserved.

    @file       isf_vdoout.h

    @note       Nothing.

    @date       2018/06/04
*/

#ifndef _ISF_VDOOUT_H_
#define _ISF_VDOOUT_H_

#if defined (__UITRON)
#include "Type.h"
#include "isf_stream_def.h"
#include "isf_stream.h"
#else
#include "kflow_common/isf_flow_def.h"
#include "kflow_common/isf_flow_core.h"
#endif

/********************************************************************
    DRIVER RELATED TYPE DEFINITION
********************************************************************/
#define VDOOUT_MAX_NUM	 2
#define VDOOUT_MAX_LYR   4

typedef enum _VDOOUT_TYPE{
	VDOOUT_TV_NTSC,      ///< SELECT DISPLAY DEVICE: TV NTSC
	VDOOUT_TV_PAL,       ///< SELECT DISPLAY DEVICE: TV PAL
	VDOOUT_HDMI,         ///< SELECT DISPLAY DEVICE: HDMI
	VDOOUT_PANEL,        ///< SELECT DISPLAY DEVICE: SERIAL
	VDOOUT_MIPIDSI,      ///< SELECT DISPLAY DEVICE: MIPI DSI

	VDOOUT_MAX,
	VDOOUT_NULL,
	ENUM_DUMMY4WORD(VDOOUT_TYPE)
} VDOOUT_TYPE;

typedef enum _VDOOUT_INPUT_DIM {
	VDOOUT_IN_AUTO = 0,       ///< IN VIDEO FORMAT IS SAME AS output
	VDOOUT_IN_640x480,        ///< IN VIDEO FORMAT IS 640x480
	VDOOUT_IN_720x480,        ///< IN VIDEO FORMAT IS 720X480
	VDOOUT_IN_720x576,        ///< IN VIDEO FORMAT IS 720x576
	VDOOUT_IN_1024x768,       ///< IN VIDEO FORMAT IS 1024x768
	VDOOUT_IN_800x600,        ///< IN VIDEO FORMAT IS 800x600
	VDOOUT_IN_1280x720,       ///< IN VIDEO FORMAT IS 1280x720
	VDOOUT_IN_1280x1024,      ///< IN VIDEO FORMAT IS 1280x1024
	VDOOUT_IN_1600x1200,      ///< IN VIDEO FORMAT IS 1600x1200
	VDOOUT_IN_2560x720,       ///< IN VIDEO FORMAT IS 2560x720
	VDOOUT_IN_1920x1080,      ///< IN VIDEO FORMAT IS 1920x1080
	VDOOUT_IN_3840x1080,      ///< IN VIDEO FORMAT IS 3840X1080
	VDOOUT_IN_3840x2160,      ///< IN VIDEO FORMAT IS 3840x2160
	VDOOUT_INPUT_DIM_MAX,
	ENUM_DUMMY4WORD(VDOOUT_INPUT_DIM)
} VDOOUT_INPUT_DIM;

typedef enum _VDOOUT_LCD_ID {
	VDOOUT_LCD_0,     		///< LCD ID 0
	VDOOUT_LCD_1,	   		///< LCD ID 1
	VDOOUT_LCD_2,     		///< LCD ID 2
    VDOOUT_LCD_3,     		///< LCD ID 3
	VDOOUT_LCD_4,     		///< LCD ID 4
	ENUM_DUMMY4WORD(VDOOUT_LCD_ID)
} VDOOUT_LCD_ID;

typedef enum _VDOOUT_HDMI_ID {
	VDOOUT_HDMI_640X480P60         = 1,    ///< HDMI VIDEO FORMAT IS 640X480 & PROGRESSIVE 60FPS
	VDOOUT_HDMI_720X480P60         = 2,    ///< HDMI VIDEO FORMAT IS 720X480 & PROGRESSIVE 60FPS & 4:3
	VDOOUT_HDMI_720X480P60_16X9    = 3,    ///< HDMI VIDEO FORMAT IS 720X480 & PROGRESSIVE 60FPS & 16:9
	VDOOUT_HDMI_1280X720P60        = 4,    ///< HDMI VIDEO FORMAT IS 1280X720 & PROGRESSIVE 60FPS
	VDOOUT_HDMI_1920X1080I60       = 5,    ///< HDMI VIDEO FORMAT IS 1920X1080 & INTERLACED 60FPS
	VDOOUT_HDMI_720X480I60         = 6,    ///< HDMI VIDEO FORMAT IS 720X480 & INTERLACED 60FPS
	VDOOUT_HDMI_720X480I60_16X9    = 7,    ///< HDMI VIDEO FORMAT IS 720X480 & INTERLACED 60FPS & 16:9
	VDOOUT_HDMI_720X240P60         = 8,    ///< HDMI VIDEO FORMAT IS 720X240 & PROGRESSIVE 60FPS
	VDOOUT_HDMI_720X240P60_16X9    = 9,    ///< HDMI VIDEO FORMAT IS 720X240 & PROGRESSIVE 60FPS & 16:9
	VDOOUT_HDMI_1440X480I60        = 10,   ///< HDMI VIDEO FORMAT IS 1440X480 & INTERLACED 60FPS
	VDOOUT_HDMI_1440X480I60_16X9   = 11,   ///< HDMI VIDEO FORMAT IS 1440X480 & INTERLACED 60FPS & 16:9
	VDOOUT_HDMI_1440X240P60        = 12,   ///< HDMI VIDEO FORMAT IS 1440X240 & PROGRESSIVE 60FPS
	VDOOUT_HDMI_1440X240P60_16X9   = 13,   ///< HDMI VIDEO FORMAT IS 1440X240 & PROGRESSIVE 60FPS & 16:9
	VDOOUT_HDMI_1440X480P60        = 14,   ///< HDMI VIDEO FORMAT IS 1440X480 & PROGRESSIVE 60FPS
	VDOOUT_HDMI_1440X480P60_16X9   = 15,   ///< HDMI VIDEO FORMAT IS 1440X480 & PROGRESSIVE 60FPS & 16:9
	VDOOUT_HDMI_1920X1080P60       = 16,   ///< HDMI VIDEO FORMAT IS 1920X1080 & PROGRESSIVE 60FPS
	VDOOUT_HDMI_720X576P50         = 17,   ///< HDMI VIDEO FORMAT IS 720X576 & PROGRESSIVE 50FPS
	VDOOUT_HDMI_720X576P50_16X9    = 18,   ///< HDMI VIDEO FORMAT IS 720X576 & PROGRESSIVE 50FPS & 16:9
	VDOOUT_HDMI_1280X720P50        = 19,   ///< HDMI VIDEO FORMAT IS 1280X720 & PROGRESSIVE 50FPS
	VDOOUT_HDMI_1920X1080I50       = 20,   ///< HDMI VIDEO FORMAT IS 1920X1080 & INTERLACED 50FPS
	VDOOUT_HDMI_720X576I50         = 21,   ///< HDMI VIDEO FORMAT IS 720X576 & INTERLACED 50FPS
	VDOOUT_HDMI_720X576I50_16X9    = 22,   ///< HDMI VIDEO FORMAT IS 720X576 & INTERLACED 50FPS & 16:9
	VDOOUT_HDMI_720X288P50         = 23,   ///< HDMI VIDEO FORMAT IS 720X288 & PROGRESSIVE 50FPS
	VDOOUT_HDMI_720X288P50_16X9    = 24,   ///< HDMI VIDEO FORMAT IS 720X288 & PROGRESSIVE 50FPS & 16:9
	VDOOUT_HDMI_1440X576I50        = 25,   ///< HDMI VIDEO FORMAT IS 1440X576 & INTERLACED 50FPS
	VDOOUT_HDMI_1440X576I50_16X9   = 26,   ///< HDMI VIDEO FORMAT IS 1440X576 & INTERLACED 50FPS & 16:9
	VDOOUT_HDMI_1440X288P50        = 27,   ///< HDMI VIDEO FORMAT IS 1440X288 & PROGRESSIVE 50FPS
	VDOOUT_HDMI_1440X288P50_16X9   = 28,   ///< HDMI VIDEO FORMAT IS 1440X288 & PROGRESSIVE 50FPS & 16:9
	VDOOUT_HDMI_1440X576P50        = 29,   ///< HDMI VIDEO FORMAT IS 1440X576 & PROGRESSIVE 50FPS
	VDOOUT_HDMI_1440X576P50_16X9   = 30,   ///< HDMI VIDEO FORMAT IS 1440X576 & PROGRESSIVE 50FPS & 16:9
	VDOOUT_HDMI_1920X1080P50       = 31,   ///< HDMI VIDEO FORMAT IS 1920X1080 & PROGRESSIVE 50FPS
	VDOOUT_HDMI_1920X1080P24       = 32,   ///< HDMI VIDEO FORMAT IS 1920X1080 & PROGRESSIVE 24FPS
	VDOOUT_HDMI_1920X1080P25       = 33,   ///< HDMI VIDEO FORMAT IS 1920X1080 & PROGRESSIVE 25FPS
	VDOOUT_HDMI_1920X1080P30       = 34,   ///< HDMI VIDEO FORMAT IS 1920X1080 & PROGRESSIVE 30FPS
	VDOOUT_HDMI_1920X1080I50_VT1250 = 39,  ///< HDMI VIDEO FORMAT IS 1920X1080 & INTERLACED  50FPS & V-TOTAL IS 1250 LINES
	VDOOUT_HDMI_1920X1080I100      = 40,   ///< HDMI VIDEO FORMAT IS 1920X1080 & INTERLACED  100FPS
	VDOOUT_HDMI_1280X720P100       = 41,   ///< HDMI VIDEO FORMAT IS 1280X720  & PROGRESSIVE 100FPS
	VDOOUT_HDMI_720X576P100        = 42,   ///< HDMI VIDEO FORMAT IS 720X576   & PROGRESSIVE 100FPS
	VDOOUT_HDMI_720X576P100_16X9   = 43,   ///< HDMI VIDEO FORMAT IS 720X576   & PROGRESSIVE 100FPS & 16:9
	VDOOUT_HDMI_720X576I100        = 44,   ///< HDMI VIDEO FORMAT IS 720X576  & INTERLACED 100FPS
	VDOOUT_HDMI_720X576I100_16X9   = 45,   ///< HDMI VIDEO FORMAT IS 720X576  & INTERLACED 100FPS & 16:9
	VDOOUT_HDMI_1920X1080I120      = 46,   ///< HDMI VIDEO FORMAT IS 1920X1080 & INTERLACED 120FPS
	VDOOUT_HDMI_1280X720P120       = 47,   ///< HDMI VIDEO FORMAT IS 1280X720  & PROGRESSIVE 120FPS
	VDOOUT_HDMI_720X480P120        = 48,   ///< HDMI VIDEO FORMAT IS 720X480   & PROGRESSIVE 120FPS
	VDOOUT_HDMI_720X480P120_16X9   = 49,   ///< HDMI VIDEO FORMAT IS 720X480   & PROGRESSIVE 120FPS & 16:9
	VDOOUT_HDMI_720X480I120        = 50,   ///< HDMI VIDEO FORMAT IS 720X480  & INTERLACED 120FPS
	VDOOUT_HDMI_720X480I120_16X9   = 51,   ///< HDMI VIDEO FORMAT IS 720X480  & INTERLACED 120FPS & 16:9
	VDOOUT_HDMI_720X576P200        = 52,   ///< HDMI VIDEO FORMAT IS 720X576  & PROGRESSIVE 200FPS
	VDOOUT_HDMI_720X576P200_16X9   = 53,   ///< HDMI VIDEO FORMAT IS 720X576  & PROGRESSIVE 200FPS & 16:9
	VDOOUT_HDMI_720X576I200        = 54,   ///< HDMI VIDEO FORMAT IS 720X576  & INTERLACED 200FPS
	VDOOUT_HDMI_720X576I200_16X9   = 55,   ///< HDMI VIDEO FORMAT IS 720X576  & INTERLACED 200FPS & 16:9
	VDOOUT_HDMI_720X480P240        = 56,   ///< HDMI VIDEO FORMAT IS 720X480  & PROGRESSIVE 240FPS
	VDOOUT_HDMI_720X480P240_16X9   = 57,   ///< HDMI VIDEO FORMAT IS 720X480  & PROGRESSIVE 240FPS & 16:9
	VDOOUT_HDMI_720X480I240        = 58,   ///< HDMI VIDEO FORMAT IS 720X480  & INTERLACED 240FPS
	VDOOUT_HDMI_720X480I240_16X9   = 59,   ///< HDMI VIDEO FORMAT IS 720X480  & INTERLACED 240FPS & 16:9
    VDOOUT_HDMI_1280X1024P30       = 60,   ///< HDMI VIDEO FORMAT IS 1280X1024  & PROGRESSIVE 30FPS
    VDOOUT_HDMI_1600X1200P30       = 61,   ///< HDMI VIDEO FORMAT IS 1600X1200  & PROGRESSIVE 30FPS
    VDOOUT_HDMI_1600X1200P60       = 62,   ///< HDMI VIDEO FORMAT IS 1600X1200  & PROGRESSIVE 60FPS
    VDOOUT_HDMI_2560X1440P30       = 92,   ///< HDMI VIDEO FORMAT IS 2560X1440 & PROGRESSIVE 30FPS
	VDOOUT_HDMI_3840X2160P24       = 93,   ///< HDMI VIDEO FORMAT IS 3840X2160 & PROGRESSIVE 24FPS
	VDOOUT_HDMI_3840X2160P25       = 94,   ///< HDMI VIDEO FORMAT IS 3840X2160 & PROGRESSIVE 25FPS
	VDOOUT_HDMI_3840X2160P30       = 95,   ///< HDMI VIDEO FORMAT IS 3840X2160 & PROGRESSIVE 30FPS
	VDOOUT_HDMI_4096X2160P24       = 98,   ///< HDMI VIDEO FORMAT IS 4096X2160 & PROGRESSIVE 24FPS
	VDOOUT_HDMI_4096X2160P25       = 99,   ///< HDMI VIDEO FORMAT IS 4096X2160 & PROGRESSIVE 25FPS
	VDOOUT_HDMI_4096X2160P30       = 100,  ///< HDMI VIDEO FORMAT IS 4096X2160 & PROGRESSIVE 30FPS
	VDOOUT_HDMI_NO_CHANGE          = 0xFE, ///< HDMI VIDEO FORMAT USE CURRENT SETTING
	VDOOUT_HDMI_MAX,
	ENUM_DUMMY4WORD(VDOOUT_HDMI_ID)
} VDOOUT_HDMI_ID;

typedef enum _VDOOUT_VGA_ID {
	VDOOUT_VGA_720X480     = 0,   ///< VGA VIDEO FORMAT IS 720X480
	VDOOUT_VGA_1024X768,          ///< VGA VIDEO FORMAT IS 1024X768
	VDOOUT_VGA_1280X720,          ///< VGA VIDEO FORMAT IS 1280X720
	VDOOUT_VGA_1280X1024,         ///< VGA VIDEO FORMAT IS 1280X1024
	VDOOUT_VGA_1600X1200,         ///< VGA VIDEO FORMAT IS 1600X1200
	VDOOUT_VGA_1920X1080,         ///< VGA VIDEO FORMAT IS 1920X1080
	VDOOUT_VGA_MAX,
	ENUM_DUMMY4WORD(VDOOUT_VGA_ID)
} VDOOUT_VGA_ID;

typedef enum _VDOOUT_CVBS_ID {
	VDOOUT_CVBS_NTSC                = 0,          ///< CVBS MODE IS NTSC
	VDOOUT_CVBS_PAL                 = 1,          ///< CVBS MODE IS NTSC
	VDOOUT_CVBS_NTSC_SD             = 2,          ///< CVBS MODE IS SD NTSC
	VDOOUT_CVBS_PAL_SD              = 3,          ///< CVBS MODE IS SD PAL
	VDOOUT_CVBS_MAX,
	ENUM_DUMMY4WORD(VDOOUT_CVBS_ID)
} VDOOUT_CVBS_ID;

typedef struct _VDOOUT_MODE {
	VDOOUT_TYPE output_type;    ///< select lcd output device
	VDOOUT_INPUT_DIM input_dim; ///< set input dim
	union {
		VDOOUT_LCD_ID    lcd;   ///< set lcd  output resolution
		VDOOUT_HDMI_ID   hdmi;  ///< set hdmi  output resolution
		VDOOUT_VGA_ID    vga;   ///< set vga  output resolution
		VDOOUT_CVBS_ID   cvbs;  ///< set cvbs  output resolution
	} output_mode;
} VDOOUT_MODE;

//////////////// layer/////////////////////

typedef enum _VDOOUT_LYR_ID {
	VDOOUT_LYR_OSD1 = 0x02,                  ///< Select display layer osd 1
	VDOOUT_LYR_VDO1 = 0x08,                  ///< Select display layer video 1
	VDOOUT_LYR_VDO2 = 0x10,                  ///< Select display layer video 2
	VDOOUT_LYR_FD   = 0x20,                  ///< Select display layer FD

	ENUM_DUMMY4WORD(VDOOUT_LYR_ID)
} VDOOUT_LYR_ID;

typedef enum {
	VDOOUT_BUFTYPE_PAL8 = 3,                 ///< Buffer uses format 8bit palette.

	VDOOUT_BUFTYPE_ARGB8565 = 8,             ///< Buffer uses format ARGB 8565.

	VDOOUT_BUFTYPE_YUV422PACK = 9,           ///< Buffer uses format YUV422.
	VDOOUT_BUFTYPE_YUV420PACK = 10,           ///< Buffer uses format YUV420.

	VDOOUT_BUFTYPE_ARGB8888 = 11,             ///< Buffer uses format ARGB 8888.

	VDOOUT_BUFTYPE_ARGB4444 = 12,             ///< Buffer uses format ARGB 4444.
	VDOOUT_BUFTYPE_ARGB1555 = 13,             ///< Buffer uses format ARGB 1555.

	ENUM_DUMMY4WORD(VDOOUT_PIX_FMT)
} VDOOUT_PIX_FMT;

typedef enum {
	VDOOUT_KEY_OP_OFF = 0x0,                 ///< For VDO: vdo color key enable =0 (videock = video1 or video2; refer to setting of CKsrc). For OSD: osd color key enable = 0
	VDOOUT_KEY_OP_YSMALLKEY = 0x1,           ///< ck = (Y < YKEY) ?
	VDOOUT_KEY_OP_YEQUKEY = 0x2,             ///< ck = (Y == YKEY && CB == CBKEY && CR == CRKEY) ?
	VDOOUT_KEY_OPP_YBIGKEY = 0x3,             ///< ck = (Y > YKEY) ?
	ENUM_DUMMY4WORD(VDOOUT_KEY_OP)
} VDOOUT_KEY_OP;

typedef enum {
	VDOOUT_BLEND_TYPE_NOALPHA,
	VDOOUT_BLEND_TYPE_GLOBAL,
	VDOOUT_BLEND_TYPE_GLOBAL_BACK,
	VDOOUT_BLEND_TYPE_SOURCE,
	VDOOUT_BLEND_TYPE_SOURCE_BACK,
	ENUM_DUMMY4WORD(VDOOUT_BLEND_TYPE)
} VDOOUT_BLEND_TYPE;

#define VDOOUT_PALETTE_MAX 256

typedef struct _VDOOUT_PALETTE {
	UINT32          start;        ///< Start entry id. Valid range from 0~255.
	UINT32          number;       ///< Total number of palette entry to be set. Valid range from 1~256
	UINT32          p_pale_entry[VDOOUT_PALETTE_MAX];  ///< p_pale_entry[7~0]:      Cr value of the palette.

} VDOOUT_PALETTE;

typedef struct _VDOOUT_LYR_COLORKEY {
	VDOOUT_LYR_ID   layer_id;      ///< select layer
	VDOOUT_KEY_OP   colorkey_op;
	UINT32   key_r;
	UINT32   key_g;
	UINT32   key_b;
} VDOOUT_LYR_COLORKEY;

typedef struct _VDOOUT_LYR_BLEND {
	VDOOUT_LYR_ID   layer_id;      ///< select layer
	VDOOUT_BLEND_TYPE  type;
	UINT32   global_alpha;
	BOOL     global_alpha5;
} VDOOUT_LYR_BLEND;

typedef struct _VDOOUT_LYR_FMT {
	VDOOUT_LYR_ID   layer_id;      	///< select layer
	VDOOUT_PIX_FMT  fmt;	///< set fb input fmt
} VDOOUT_LYR_FMT;

typedef struct _VDOOUT_LYR_ENABLE {
	VDOOUT_LYR_ID layer_id; 	///< select layer
	BOOL          enable;   	///< 0:disable, 1:enable
} VDOOUT_LYR_ENABLE;

typedef struct _VDOOUT_LYR_DIM {
	VDOOUT_LYR_ID   layer_id;      ///< select layer
	USIZE   in_dim;
	URECT   out_rect;
    UINT32  fmt;
} VDOOUT_LYR_DIM;

typedef struct {
	VDOOUT_HDMI_ID  video_id;        ///< The Video Format which TV supports.
	UINT32          vdo_3d_ability;  ///< The 3D format supported for this video ID. The format uses the "bit-wise OR" of HDMI_3DFMT.
} VDOOUT_HDMI_VDOABI;

typedef struct {
	VDOOUT_HDMI_VDOABI  video_abi[32]; ///< The structure of the supported video format and its 3D ability.
	UINT32 len;         ///< Number of video formats supported by the TV/Display.
} VDOOUT_HDMI_ABILITY;

typedef struct _VDOOUT_DEV_CFG {
    UINT32     ddr_id;
	UINT32     in_func;  ///< IPC only. additional function of in (bit-wise mask)
} VDOOUT_FUNC_CFG;

typedef struct _VDOOUT_VND_CFG {
	UINT32     in_func;  ///< IPC only. additional function of in (bit-wise mask)
} VDOOUT_VND_CFG;

typedef struct _VDOOUT_IF_CFG {
    UINT32 lcd_ctrl;         ///< select the LCD Control Interface.
	UINT32 ui_sif_ch;        ///< If lcd_ctrl=SIF, this field is the assigned SIF channel number.
	UINT32 ui_gpio_sen;      ///< If lcd_ctrl=GPIO,this field is the assigned GPIO pin name for SIF SEN.
	UINT32 ui_gpio_clk;      ///< If lcd_ctrl=GPIO,this field is the assigned GPIO pin name for SIF CLK.
	UINT32 ui_gpio_data;     ///< If lcd_ctrl=GPIO,this field is the assigned GPIO pin name for SIF DATA.
} VDOOUT_IF_CFG;

typedef struct _VDOOUT_DDD_CFG {
    VDOOUT_MODE mode;
    VDOOUT_IF_CFG if_cfg;
} VDOOUT_DEV_CFG;

typedef struct _VDOOUT_VND_IN {
	UINT32     queue_depth;  ///< IPC only. additional function of in (bit-wise mask)
} VDOOUT_VND_IN;
/**
     Direction type

     for VDOOUT_DIR
*/
typedef enum _VDOOUT_DIR {
	VDOOUT_DIR_0 = 0,       ///< No rotation
	VDOOUT_DIR_180,         ///< rotate 180 degree
	VDOOUT_DIR_HORZ,        ///< horzional flip
	VDOOUT_DIR_VERT,        ///< vertical flip
	VDOOUT_DIR_NO_HANDLE,   ///< user handle ide(n) output dir. dispsrv will not set output dir to ide(n) in cases of 0,180,horz,vert.
	VDOOUT_DIR_90=0x10,          ///< rotate 90 degree
	VDOOUT_DIR_270=0x20,         ///< rotate 270 degree
	VDOOUT_DIR_MAX_NUM,     ///< Number of rotation item
	ENUM_DUMMY4WORD(VDOOUT_DIR)
} VDOOUT_DIR;

#define VODOUT_ROT_MASK  0xF0

typedef struct _VDOOUT_INFO {
	UINT32 uiDevObj;
	UINT32 bEn;
	USIZE  devSize;
	UINT32 devfps;
	USIZE  devAspect;
	USIZE  bufSize;
	USIZE  ImgSize;
	USIZE  ImgRatio;
	UINT32 bufFmt;
	URECT  winRect;
	VDOOUT_DIR dir;
	UINT32 lyrfmt[VDOOUT_MAX_LYR];
	UINT32 buffercount;
} VDOOUT_INFO;

#define VDOOUT_FUNC_NOWAIT			0x00000002 //no wait for flip finish
#define VDOOUT_FUNC_KEEP_LAST       0x01000000 //vout stop would keep last frame in tmp buffer
#define VDOOUT_FUNC_SKIP_CLOSE      0x02000000 //vout stop would keep last frame in tmp buffer
enum {
	VDOOUT_PARAM_STAR = 0x90001000,
	VDOOUT_PARAM_MODE = VDOOUT_PARAM_STAR,
	VDOOUT_PARAM_CFG,
	VDOOUT_PARAM_CAPS,
	VDOOUT_PARAM_PALETTE_TABLE,
	VDOOUT_PARAM_WIN_ATTR,
	VDOOUT_PARAM_LYR_FMT,
  	VDOOUT_PARAM_LYR_BLEND,
  	VDOOUT_PARAM_LYR_COLORKEY,
	VDOOUT_PARAM_LYR_ENABLE,
	VDOOUT_PARAM_LYR_DIM,
	VDOOUT_PARAM_HDMI_ABILITY,
	VDOOUT_PARAM_SLEEP,
	VDOOUT_PARAM_VND_CFG,
	VDOOUT_PARAM_VND_IF_CFG,
	VDOOUT_PARAM_VND_ABORT,
	VDOOUT_PARAM_VND_IN,

};

typedef enum _VDOOUT_UNIT_TYPE {
	VDOOUT_UNIT_TYPE_LEAF = 0,
	VDOOUT_UNIT_TYPE_ROOT,
	ENUM_DUMMY4WORD(VDOOUT_UNIT_TYPE)
} VDOOUT_UNIT_TYPE;

extern ISF_UNIT isf_vdoout0;
extern ISF_UNIT isf_vdoout1;
#endif //_ISF_VDOOUT_H_
