/*
    TS MUXER/TS DEMUXER/HWCOPY Engine Integration module internal register definitions

    @file       tse_reg.h
    @ingroup    mIDrvMisc_TSE
    @note       Nothing

    Copyright   Novatek Microelectronics Corp. 2016.  All rights reserved.
*/

/*
    @addtogroup mIDrvMisc_TSE
*/
//@{

#ifndef _TSE_REG_H_
#define _TSE_REG_H_

#include "rcw_macro.h"

// 0x00, TSE Operation Control Register
REGDEF_OFFSET(TSE_OP_CTRL_REG, 0x00)
REGDEF_BEGIN(TSE_OP_CTRL_REG)
REGDEF_BIT(START, 1)                // Start Trigger
REGDEF_BIT(LAST_BLOCK, 1)           // the last block of input buffer
REGDEF_BIT(, 2)
REGDEF_BIT(INPUT_RELOAD, 1)			// reload next block of input address
REGDEF_BIT(OUT0_RELOAD, 1)			// reload next block of output address
REGDEF_BIT(OUT1_RELOAD, 1)			// reload next block of output address
REGDEF_BIT(OUT2_RELOAD, 1)			// reload next block of output address
REGDEF_BIT(, 24)
REGDEF_END(TSE_OP_CTRL_REG)


// 0x04, TSE Configuration Control Register
REGDEF_OFFSET(TSE_CFG_CTRL_REG, 0x04)
REGDEF_BEGIN(TSE_CFG_CTRL_REG)
REGDEF_BIT(TSE_MODE, 2)             // TSE Mode Select
REGDEF_BIT(, 14)
REGDEF_BIT(TSMUX_PAYLOAD_MODE, 2)   // TSMUX Payload Mode Select
REGDEF_BIT(, 6)
REGDEF_BIT(HWCOPY_MODE, 1)          // HWCOPY Mode Select
REGDEF_BIT(, 7)
REGDEF_END(TSE_CFG_CTRL_REG)

// 0x08, TSMUX header information Register
REGDEF_OFFSET(TSMUX_HEAD_INFO_REG, 0x08)
REGDEF_BEGIN(TSMUX_HEAD_INFO_REG)
REGDEF_BIT(CONT_COUNTER, 4)         // Continuity Counter
REGDEF_BIT(, 2)
REGDEF_BIT(SCRAMBLE_CTRL, 2)        // Scrambling Control
REGDEF_BIT(PID, 13)                 // Packet ID
REGDEF_BIT(TP, 1)                   // Transport Priority
REGDEF_BIT(START_INDICATOR, 1)      // Payload Unit Start Indicator
REGDEF_BIT(TEI, 1)                  // Transport Error Indicator
REGDEF_BIT(SYNC_BYTE, 8)            // Sync Byte of TS packet
REGDEF_END(TSMUX_HEAD_INFO_REG)

// 0x0C, TSMUX in total size Register
REGDEF_OFFSET(TSMUX_IN_TOTAL_SIZE_REG, 0x0c)
REGDEF_BEGIN(TSMUX_IN_TOTAL_SIZE_REG)
REGDEF_BIT(IN_TOTAL_SIZE, 32)         //mux in total size
REGDEF_END(TSMUX_IN_TOTAL_SIZE_REG)

// 0x10, TSMUX Adaptation Field Information Register 1
REGDEF_OFFSET(TSMUX_AFINFO1_REG, 0x10)
REGDEF_BEGIN(TSMUX_AFINFO1_REG)
REGDEF_BIT(ADAPT_FIELD_FLAGS, 8)
REGDEF_BIT(LAST_DATA_MUX_MODE, 1)
REGDEF_BIT(, 7)
REGDEF_BIT(STUFF_VALUE, 8)
REGDEF_BIT(, 8)
REGDEF_END(TSMUX_AFINFO1_REG)

// 0x14, TSMUX Countinuity Current Counter Register
REGDEF_OFFSET(TSMUX_CON_CURR_CNT_REG, 0x14)
REGDEF_BEGIN(TSMUX_CON_CURR_CNT_REG)
REGDEF_BIT(CONT_CURR_COUNTER, 4)	// the continuity counter value
REGDEF_BIT(, 28)
REGDEF_END(TSMUX_CON_CURR_CNT_REG)

// 0x18, TSDEMUX Configuration Register
REGDEF_OFFSET(TSDEMUX_CFG_REG, 0x18)
REGDEF_BEGIN(TSDEMUX_CFG_REG)
REGDEF_BIT(SYNC_BYTE, 8)
REGDEF_BIT(ADAPTATION_FLAG, 8)
REGDEF_BIT(, 16)
REGDEF_END(TSDEMUX_CFG_REG)

// 0x1C, TSDEMUX PID Filter0 Register
REGDEF_OFFSET(TSDEMUX_FILTER0_REG, 0x1C)
REGDEF_BEGIN(TSDEMUX_FILTER0_REG)
REGDEF_BIT(FILT0_PID, 13)			// PID filter value
REGDEF_BIT(, 3)
REGDEF_BIT(FILT0_EN, 1)				// PID filter enable
REGDEF_BIT(CONTINUITY0_MODE, 1)		// initial value check mode selection
REGDEF_BIT(, 6)
REGDEF_BIT(CONTINUITY0_VAL, 4)		// initial value
REGDEF_BIT(LAST_CONTINUITY0_VAL, 4)	// last continuity counter value
REGDEF_END(TSDEMUX_FILTER0_REG)

// 0x20, TSDEMUX PID Filter1 Register
REGDEF_OFFSET(TSDEMUX_FILTER1_REG, 0x20)
REGDEF_BEGIN(TSDEMUX_FILTER1_REG)
REGDEF_BIT(FILT1_PID, 13)			// PID filter value
REGDEF_BIT(, 3)
REGDEF_BIT(FILT1_EN, 1)				// PID filter enable
REGDEF_BIT(CONTINUITY1_MODE, 1)		// initial value check mode selection
REGDEF_BIT(, 6)
REGDEF_BIT(CONTINUITY1_VAL, 4)		// initial value
REGDEF_BIT(LAST_CONTINUITY1_VAL, 4)	// last continuity counter value
REGDEF_END(TSDEMUX_FILTER1_REG)

// 0x24, TSDEMUX PID Filter2 Register
REGDEF_OFFSET(TSDEMUX_FILTER2_REG, 0x24)
REGDEF_BEGIN(TSDEMUX_FILTER2_REG)
REGDEF_BIT(FILT2_PID, 13)			// PID filter value
REGDEF_BIT(, 3)
REGDEF_BIT(FILT2_EN, 1)				// PID filter enable
REGDEF_BIT(CONTINUITY2_MODE, 1)		// initial value check mode selection
REGDEF_BIT(, 6)
REGDEF_BIT(CONTINUITY2_VAL, 4)		// initial value
REGDEF_BIT(LAST_CONTINUITY2_VAL, 4)	// last continuity counter value
REGDEF_END(TSDEMUX_FILTER2_REG)

//0x28 Constant Value Register
REGDEF_OFFSET(HWCOPY_CONST_REG, 0x28)
REGDEF_BEGIN(HWCOPY_CONST_REG)
REGDEF_BIT(CTEX, 32)                 // Constant Value
REGDEF_END(HWCOPY_CONST_REG)

// 0x40, TSE Input Address Register
REGDEF_OFFSET(TSE_IN_ADDR_REG, 0x40)
REGDEF_BEGIN(TSE_IN_ADDR_REG)
REGDEF_BIT(IN_ADDR, 31)				// input address
REGDEF_BIT(, 1)
REGDEF_END(TSE_IN_ADDR_REG)

// 0x44, TSE OUT0 Address Register
REGDEF_OFFSET(TSE_OUT0_ADDR_REG, 0x44)
REGDEF_BEGIN(TSE_OUT0_ADDR_REG)
REGDEF_BIT(OUT0_ADDR, 31)			// output address
REGDEF_BIT(, 1)
REGDEF_END(TSE_OUT0_ADDR_REG)

// 0x48, TSE OUT1 Address Register
REGDEF_OFFSET(TSE_OUT1_ADDR_REG, 0x48)
REGDEF_BEGIN(TSE_OUT1_ADDR_REG)
REGDEF_BIT(OUT1_ADDR, 31)			// output address
REGDEF_BIT(, 1)
REGDEF_END(TSE_OUT1_ADDR_REG)

// 0x4C, TSE OUT2 Address Register
REGDEF_OFFSET(TSE_OUT2_ADDR_REG, 0x4C)
REGDEF_BEGIN(TSE_OUT2_ADDR_REG)
REGDEF_BIT(OUT2_ADDR, 31)			// output address
REGDEF_BIT(, 1)
REGDEF_END(TSE_OUT2_ADDR_REG)

// 0x50, TSE Input Size Register
REGDEF_OFFSET(TSE_IN_SIZE_REG, 0x50)
REGDEF_BEGIN(TSE_IN_SIZE_REG)
REGDEF_BIT(IN_SIZE, 26)				// input size
REGDEF_BIT(, 6)
REGDEF_END(TSE_IN_SIZE_REG)

// 0x54, TSE OUT0 Size Limitation Register
REGDEF_OFFSET(TSE_OUT0_SIZE_LIMITATION_REG, 0x54)
REGDEF_BEGIN(TSE_OUT0_SIZE_LIMITATION_REG)
REGDEF_BIT(OUT0_LIMIT, 32)			// output size
REGDEF_END(TSE_OUT0_SIZE_LIMITATION_REG)

// 0x58, TSE OUT1 Size Limitation Register
REGDEF_OFFSET(TSE_OUT1_SIZE_LIMITATION_REG, 0x58)
REGDEF_BEGIN(TSE_OUT1_SIZE_LIMITATION_REG)
REGDEF_BIT(OUT1_LIMIT, 32)			// output size
REGDEF_END(TSE_OUT1_SIZE_LIMITATION_REG)

// 0x5C, TSE OUT2 Size Limitation Register
REGDEF_OFFSET(TSE_OUT2_SIZE_LIMITATION_REG, 0x5C)
REGDEF_BEGIN(TSE_OUT2_SIZE_LIMITATION_REG)
REGDEF_BIT(OUT2_LIMIT, 32)			// output size
REGDEF_END(TSE_OUT2_SIZE_LIMITATION_REG)

// 0x60, TSE OUT0 Total Length Register
REGDEF_OFFSET(TSE_OUT0_TOTAL_LENGTH_REG, 0x60)
REGDEF_BEGIN(TSE_OUT0_TOTAL_LENGTH_REG)
REGDEF_BIT(OUT0_LEN, 32)			// total output length
REGDEF_END(TSE_OUT0_TOTAL_LENGTH_REG)

// 0x64, TSE OUT1 Total Length Register
REGDEF_OFFSET(TSE_OUT1_TOTAL_LENGTH_REG, 0x64)
REGDEF_BEGIN(TSE_OUT1_TOTAL_LENGTH_REG)
REGDEF_BIT(OUT1_LEN, 32)			// total output length
REGDEF_END(TSE_OUT1_TOTAL_LENGTH_REG)

// 0x68, TSE OUT2 Total Length Register
REGDEF_OFFSET(TSE_OUT2_TOTAL_LENGTH_REG, 0x68)
REGDEF_BEGIN(TSE_OUT2_TOTAL_LENGTH_REG)
REGDEF_BIT(OUT2_LEN, 32)			// total output length
REGDEF_END(TSE_OUT2_TOTAL_LENGTH_REG)

// 0x80, TSE Interrupt Enable Register
REGDEF_OFFSET(TSE_INTEN_REG, 0x80)
REGDEF_BEGIN(TSE_INTEN_REG)
REGDEF_BIT(CMPL, 1)
REGDEF_BIT(INPUT_END, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(OUT0_FULL, 1)
REGDEF_BIT(OUT1_FULL, 1)
REGDEF_BIT(OUT2_FULL, 1)
REGDEF_BIT(, 1)
REGDEF_BIT(CONTY0_ERR, 1)
REGDEF_BIT(TEI0, 1)
REGDEF_BIT(SYNC0_ERR, 1)
REGDEF_BIT(ADAPFLG0_ERR, 1)
REGDEF_BIT(, 4)
REGDEF_BIT(CONTY1_ERR, 1)
REGDEF_BIT(TEI1, 1)
REGDEF_BIT(SYNC1_ERR, 1)
REGDEF_BIT(ADAPFLG1_ERR, 1)
REGDEF_BIT(, 4)
REGDEF_BIT(CONTY2_ERR, 1)
REGDEF_BIT(TEI2, 1)
REGDEF_BIT(SYNC2_ERR, 1)
REGDEF_BIT(ADAPFLG2_ERR, 1)
REGDEF_BIT(, 4)
REGDEF_END(TSE_INTEN_REG)

// 0x88, TSE Interrupt Status Register
REGDEF_OFFSET(TSE_INTSTS_REG, 0x88)
REGDEF_BEGIN(TSE_INTSTS_REG)
REGDEF_BIT(CMPL, 1)
REGDEF_BIT(INPUT_END, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(OUT0_FULL, 1)
REGDEF_BIT(OUT1_FULL, 1)
REGDEF_BIT(OUT2_FULL, 1)
REGDEF_BIT(, 1)
REGDEF_BIT(CONTY0_ERR, 1)
REGDEF_BIT(TEI0, 1)
REGDEF_BIT(SYNC0_ERR, 1)
REGDEF_BIT(ADAPFLG0_ERR, 1)
REGDEF_BIT(, 4)
REGDEF_BIT(CONTY1_ERR, 1)
REGDEF_BIT(TEI1, 1)
REGDEF_BIT(SYNC1_ERR, 1)
REGDEF_BIT(ADAPFLG1_ERR, 1)
REGDEF_BIT(, 4)
REGDEF_BIT(CONTY2_ERR, 1)
REGDEF_BIT(TEI2, 1)
REGDEF_BIT(SYNC2_ERR, 1)
REGDEF_BIT(ADAPFLG2_ERR, 1)
REGDEF_BIT(, 4)
REGDEF_END(TSE_INTSTS_REG)

// 0x90, TSE Debug Select Register
REGDEF_OFFSET(TSE_DEBUG_SEL_REG, 0x90)
REGDEF_BEGIN(TSE_DEBUG_SEL_REG)
REGDEF_BIT(DEBUG_SEL, 3)            // Debug Signal Select
REGDEF_BIT(, 29)
REGDEF_END(TSE_DEBUG_SEL_REG)

//@}
#endif //_TSE_REG_H_