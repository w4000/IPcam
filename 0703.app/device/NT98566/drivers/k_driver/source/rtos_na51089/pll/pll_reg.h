/**
    PLL register header

    PLL register header file

    @file       pll_reg.h
    @ingroup    mIDrvSys_CG
    @note       Nothing

    Copyright   Novatek Microelectronics Corp. 2011.  All rights reserved.
*/

#ifndef _PLL_REG_H
#define _PLL_REG_H

#include <rcw_macro.h>

//
//0x00 PLL power enable Register
//
#define PLL_PLL_PWREN_REG_OFS           0x00
REGDEF_BEGIN(PLL_PLL_PWREN_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PLL_PWREN_REG)

//
//0x04 PLL Status Register
//
#define PLL_PLL_STATUS_REG_OFS          0x04
REGDEF_BEGIN(PLL_PLL_STATUS_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PLL_STATUS_REG)

//
//0x08 Reserved Register
//

//
//0x0C PLL Status 2 Register
//
#define PLL_PLL_STATUS2_REG_OFS         0x0C
REGDEF_BEGIN(PLL_PLL_STATUS2_REG)
REGDEF_BIT(, 31)
REGDEF_BIT(OSC_FREQ, 1)
REGDEF_END(PLL_PLL_STATUS2_REG)


//
//0x10 System Clock Rate Register
//
#define PLL_SYS_CR_REG_OFS              0x10
REGDEF_BEGIN(PLL_SYS_CR_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_CR_REG)

//
//0x14 IPP Clock Rate Register 0
//
#define PLL_IPP_CR0_REG_OFS             0x14
REGDEF_BEGIN(PLL_IPP_CR0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_IPP_CR0_REG)

//
//0x18 IPP Clock Rate Register 1
//
#define PLL_IPP_CR1_REG_OFS             0x18
REGDEF_BEGIN(PLL_IPP_CR1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_IPP_CR1_REG)

//
//0x1C CODEC Clock Rate Register
//
#define PLL_CODEC_CR_REG_OFS            0x1C
REGDEF_BEGIN(PLL_CODEC_CR_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CODEC_CR_REG)

//
//0x20 Peripheral Clock Rate Register
//
#define PLL_PERI_CR_REG_OFS             0x20
REGDEF_BEGIN(PLL_PERI_CR_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PERI_CR_REG)

//
//0x24 Peripheral Clock Rate Register 1
//
#define PLL_PERI_CR1_REG_OFS             0x24
REGDEF_BEGIN(PLL_PERI_CR1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PERI_CR1_REG)

//
//0x28~0x2C Reserved Register
//

//
//0x30 IPP Clock Divider Register
//
#define PLL_IPP_CLKDIV_REG_OFS          0x30
REGDEF_BEGIN(PLL_IPP_CLKDIV_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_IPP_CLKDIV_REG)

//
//0x34 Video Clock Divider Register
//
#define PLL_VDO_CLKDIV_REG_OFS          0x34
REGDEF_BEGIN(PLL_VDO_CLKDIV_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_VDO_CLKDIV_REG)

//
//0x38 Peripheral Clock Divider Register
//
#define PLL_PERI_CLKDIV_REG_OFS         0x38
REGDEF_BEGIN(PLL_PERI_CLKDIV_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PERI_CLKDIV_REG)

//
//0x3C SDIO Clock Divider Register
//
#define PLL_SDIO_CLKDIV_REG_OFS         0x3C
REGDEF_BEGIN(PLL_SDIO_CLKDIV_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SDIO_CLKDIV_REG)


//
//0x40 Peripheral Clock Divider Register 1
//
#define PLL_PERI_CLKDIV1_REG_OFS        0x40
REGDEF_BEGIN(PLL_PERI_CLKDIV1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PERI_CLKDIV1_REG)

//
//0x44 SPI Clock Divider Register
//
#define PLL_SPI_CLKDIV_REG_OFS          0x44
REGDEF_BEGIN(PLL_SPI_CLKDIV_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SPI_CLKDIV_REG)

//
//0x48 SPI Clock Divider Register 1
//
#define PLL_SPI_CLKDIV1_REG_OFS         0x48
REGDEF_BEGIN(PLL_SPI_CLKDIV1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SPI_CLKDIV1_REG)


//
//0x4C SPI Clock Divider Register 2
//
#define PLL_SPI_CLKDIV2_REG_OFS         0x4C
REGDEF_BEGIN(PLL_SPI_CLKDIV2_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SPI_CLKDIV2_REG)

//
//0x50 PWM Clock Rate Register 0
//
#define PLL_PWMCR0_REG_OFS              0x50
REGDEF_BEGIN(PLL_PWMCR0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PWMCR0_REG)

//
//0x54 PWM Clock Rate Register 1
//
#define PLL_PWMCR1_REG_OFS              0x54
REGDEF_BEGIN(PLL_PWMCR1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PWMCR1_REG)

//
//0x58 PWM Clock Rate Register 2
//
#define PLL_PWMCR2_REG_OFS              0x58
REGDEF_BEGIN(PLL_PWMCR2_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PWMCR2_REG)

//
//0x5C PWM Clock Rate Register 3
//
#define PLL_PWMCR3_REG_OFS              0x5C
REGDEF_BEGIN(PLL_PWMCR3_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PWMCR3_REG)

//
//0x60 Peipheral Clock Rate Register 2
//
#define PLL_TRNG_REG_OFS                0x60
REGDEF_BEGIN(PLL_TRNG_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_TRNG_REG)

//
//0x64 PWM Clock Rate Register 5
//
#define PLL_PWMCR5_REG_OFS              0x64
REGDEF_BEGIN(PLL_PWMCR5_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PWMCR5_REG)

//
//0x68 ~ 0x6C Reserved Register
//

//
//0x70 Clock Enable Register 0
//
#define PLL_CLKEN0_REG_OFS              0x70
REGDEF_BEGIN(PLL_CLKEN0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CLKEN0_REG)

//
//0x74 Clock Enable Register 1
//
#define PLL_CLKEN1_REG_OFS              0x74
REGDEF_BEGIN(PLL_CLKEN1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CLKEN1_REG)

//
//0x78 Clock Enable Register 2
//
#define PLL_CLKEN2_REG_OFS              0x78
REGDEF_BEGIN(PLL_CLKEN2_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CLKEN2_REG)

//
//0x7C Clock Enable Register 3
//
#define PLL_CLKEN3_REG_OFS              0x7C
REGDEF_BEGIN(PLL_CLKEN3_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CLKEN3_REG)

//
//0x80 System Reset Register 0
//
#define PLL_SYS_RST0_REG_OFS            0x80
REGDEF_BEGIN(PLL_SYS_RST0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_RST0_REG)


//
//0x84 System Reset Register 1
//
#define PLL_SYS_RST1_REG_OFS            0x84
REGDEF_BEGIN(PLL_SYS_RST1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_RST1_REG)

//
//0x88 System Reset Register 2
//
#define PLL_SYS_RST2_REG_OFS            0x88
REGDEF_BEGIN(PLL_SYS_RST2_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_RST2_REG)

//
//0x8C Reserved Register
//

//
//0x90 CPU2 clock enable
//
#define PLL_CPU2_CLKEN_REG_OFS          0x90
REGDEF_BEGIN(PLL_CPU2_CLKEN_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CPU2_CLKEN_REG)

//
//0x94 CPU2 Reset Register
//
#define PLL_CPU2_RST_REG_OFS            0x94
REGDEF_BEGIN(PLL_CPU2_RST_REG_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CPU2_RST_REG_REG)


//
//0x98~0x9C Reserved Register
//

//
//0xA0 Sleep Register
//
#define PLL_SLP_REG_OFS                 0xA0
REGDEF_BEGIN(PLL_SLP_REG)
REGDEF_BIT(SLP_MODE, 2)
REGDEF_BIT(SLP_EN, 1)
REGDEF_BIT(SLP_INT, 1)
REGDEF_BIT(SLP_INTE, 1)
REGDEF_BIT(SLP_SKIP_CPU_SLEEP, 1)
REGDEF_BIT(reserved1, 26)
REGDEF_END(PLL_SLP_REG)

//
//0xA4~0xAC Reserved Registers
//

//
//0xB0 CLK Auto Gating Register 0
//
#define PLL_CLKGATE0_REG_OFS            0xB0
REGDEF_BEGIN(PLL_CLKGATE0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CLKGATE0_REG)

//
//0xB4 CLK Auto Gating Register 1
//
#define PLL_CLKGATE1_REG_OFS            0xB4
REGDEF_BEGIN(PLL_CLKGATE1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CLKGATE1_REG)

//
//0xB8~0xBC Reserved Register
//

//
//0xC0 PCLK Auto Gating Register 0
//
#define PLL_PCLKGATE0_REG_OFS           0xC0
REGDEF_BEGIN(PLL_PCLKGATE0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PCLKGATE0_REG)

//
//0xC4 PCLK Auto Gating Register 1
//
#define PLL_PCLKGATE1_REG_OFS           0xC4
REGDEF_BEGIN(PLL_PCLKGATE1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PCLKGATE1_REG)

//
//0xC8 PCLK Auto Gating Register 2
//
#define PLL_PCLKGATE2_REG_OFS           0xC8
REGDEF_BEGIN(PLL_PCLKGATE2_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_PCLKGATE2_REG)

//
//0xD0 SRAM ShutDown Register 0
//
#define PLL_SYS_SRAMSD0_REG_OFS            0xD0
REGDEF_BEGIN(PLL_SYS_SRAMSD0_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_SRAMSD0_REG)


//
//0xD4 SRAM ShutDown Register 1
//
#define PLL_SYS_SRAMSD1_REG_OFS            0xD4
REGDEF_BEGIN(PLL_SYS_SRAMSD1_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_SRAMSD1_REG)

//
//0xD8 SRAM ShutDown Register 2
//
#define PLL_SYS_SRAMSD2_REG_OFS            0xD8
REGDEF_BEGIN(PLL_SYS_SRAMSD2_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_SYS_SRAMSD2_REG)


//
//0x0DC~0xE0 Reserved Register
//

//
//0xE4 CPU2 SRAM ShutDown Register
//
#define PLL_CPU2_SRAMSD_REG_OFS            0xE4
REGDEF_BEGIN(PLL_CPU2_SRAMSD_REG_REG)
REGDEF_BIT(DONTCARE, 32)
REGDEF_END(PLL_CPU2_SRAMSD_REG_REG)

//
//0x0DC~0xFFC Reserved Register
//

/****************************************************/

REGDEF_BEGIN(PLL_PLL2_CR0_REG)
REGDEF_BIT(PLL_RATIO0, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLL2_CR0_REG)

REGDEF_BEGIN(PLL_PLL2_CR1_REG)
REGDEF_BIT(PLL_RATIO1, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLL2_CR1_REG)

REGDEF_BEGIN(PLL_PLL2_CR2_REG)
REGDEF_BIT(PLL_RATIO2, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLL2_CR2_REG)


#define PLL528_PLL03_BASE_REG_OFS        0x4480	//560(DMA)
#define PLL528_PLL04_BASE_REG_OFS        0x44C0	//Dummy
#define PLL528_PLL05_BASE_REG_OFS        0x4540	//560(Sensor1)
#define PLL528_PLL06_BASE_REG_OFS        0x44C0	//560(IDE_ETH)
#define PLL528_PLL07_BASE_REG_OFS        0x45C0	//560(Audio)
#define PLL528_PLL08_BASE_REG_OFS        0x4400	//560(CPU)
#define PLL528_PLL09_BASE_REG_OFS        0x4500	//560(IDE_ETH_bak)
#define PLL528_PLL10_BASE_REG_OFS        0x4480	//Dummy
#define PLL528_PLL11_BASE_REG_OFS        0x4440	//560(DSI)
#define PLL528_PLL12_BASE_REG_OFS        0x4580	//560(Sensor2)

#define PLL528_PLL13_BASE_REG_OFS        0x4800	//Dummy
#define PLL528_PLL14_BASE_REG_OFS        0x4440	//Dummy
#define PLL528_PLL15_BASE_REG_OFS        0x4740	//Dummy
#define PLL528_PLL16_BASE_REG_OFS        0x4580	//Dummy
#define PLL528_PLL17_BASE_REG_OFS        0x4700	//Dummy
#define PLL528_PLL18_BASE_REG_OFS        0x4680	//Dummy

#define PLL_CR0_OFS            			 0x20
#define PLL_CR1_OFS            			 0x24
#define PLL_CR2_OFS            			 0x28

//
//0x1208 PLL3 (For DMA) Clock Rate Register 0
//
#define PLL_PLL3_CR0_REG_OFS            0x1208
#define PLL_PLL3_CR1_REG_OFS            0x120C
#define PLL_PLL3_CR2_REG_OFS            0x1210

#define PLL528_PLL3_CR0_REG_OFS         (PLL528_PLL03_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL3_CR1_REG_OFS         (PLL528_PLL03_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL3_CR2_REG_OFS         (PLL528_PLL03_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1318 PLL4 (For SSPLL) Clock Rate Register 0 => No PLL 4 @ 560
//
#define PLL_PLL4_CR0_REG_OFS            0x1318
#define PLL_PLL4_CR1_REG_OFS            0x131C
#define PLL_PLL4_CR2_REG_OFS            0x1320

#define PLL528_PLL4_CR0_REG_OFS         (PLL528_PLL04_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL4_CR1_REG_OFS         (PLL528_PLL04_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL4_CR2_REG_OFS         (PLL528_PLL04_BASE_REG_OFS+PLL_CR2_OFS)
//
//0x13D0 PLL5 (For sensor) Clock Rate Register 0
//
#define PLL_PLL5_CR0_REG_OFS            0x13D0
#define PLL_PLL5_CR1_REG_OFS            0x13D4
#define PLL_PLL5_CR2_REG_OFS            0x13D8

#define PLL528_PLL5_CR0_REG_OFS         (PLL528_PLL05_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL5_CR1_REG_OFS         (PLL528_PLL05_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL5_CR2_REG_OFS         (PLL528_PLL05_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1288 PLL6 (For IDE/ETH) Clock Rate Register 0
//
#define PLL_PLL6_CR0_REG_OFS            0x1288
#define PLL_PLL6_CR1_REG_OFS            0x128C
#define PLL_PLL6_CR2_REG_OFS            0x1290

#define PLL528_PLL6_CR0_REG_OFS         (PLL528_PLL06_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL6_CR1_REG_OFS         (PLL528_PLL06_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL6_CR2_REG_OFS         (PLL528_PLL06_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x12E8 PLL7 (For audio) Clock Rate Register 0
//
#define PLL_PLL7_CR0_REG_OFS            0x12E8
#define PLL_PLL7_CR1_REG_OFS            0x12EC
#define PLL_PLL7_CR2_REG_OFS            0x12F0

#define PLL528_PLL7_CR0_REG_OFS         (PLL528_PLL07_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL7_CR1_REG_OFS         (PLL528_PLL07_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL7_CR2_REG_OFS         (PLL528_PLL07_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1188 PLL8 (For CPU) Clock Rate Register 0
//
#define PLL_PLL8_CR0_REG_OFS            0x1188
#define PLL_PLL8_CR1_REG_OFS            0x118C
#define PLL_PLL8_CR2_REG_OFS            0x1190

#define PLL528_PLL8_CR0_REG_OFS         (PLL528_PLL08_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL8_CR1_REG_OFS         (PLL528_PLL08_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL8_CR2_REG_OFS         (PLL528_PLL08_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x11A8 PLL9 (For IDE/ETH BACKUP) Clock Rate Register 0
//
#define PLL_PLL9_CR0_REG_OFS            0x134C
#define PLL_PLL9_CR1_REG_OFS            0x1350
#define PLL_PLL9_CR2_REG_OFS            0x1354

#define PLL528_PLL9_CR0_REG_OFS         (PLL528_PLL09_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL9_CR1_REG_OFS         (PLL528_PLL09_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL9_CR2_REG_OFS         (PLL528_PLL09_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x12A8 PLL10 (For CNN) Clock Rate Register 0
//
#define PLL_PLL10_CR0_REG_OFS           0x12A8
#define PLL_PLL10_CR1_REG_OFS           0x12AC
#define PLL_PLL10_CR2_REG_OFS           0x12B0

#define PLL528_PLL10_CR0_REG_OFS        (PLL528_PLL10_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL10_CR1_REG_OFS        (PLL528_PLL10_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL10_CR2_REG_OFS        (PLL528_PLL10_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1268 PLL11 (For DSI) Clock Rate Register 0
//
#define PLL_PLL11_CR0_REG_OFS           0x1268
#define PLL_PLL11_CR1_REG_OFS           0x126C
#define PLL_PLL11_CR2_REG_OFS          	0x1270

#define PLL528_PLL11_CR0_REG_OFS        (PLL528_PLL11_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL11_CR1_REG_OFS        (PLL528_PLL11_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL11_CR2_REG_OFS        (PLL528_PLL11_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1340 PLL12 (For Sensor2) Clock Rate Register 0
//
#define PLL_PLL12_CR0_REG_OFS           0x1340
#define PLL_PLL12_CR1_REG_OFS           0x1344
#define PLL_PLL12_CR2_REG_OFS           0x1348

#define PLL528_PLL12_CR0_REG_OFS        (PLL528_PLL12_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL12_CR1_REG_OFS        (PLL528_PLL12_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL12_CR2_REG_OFS        (PLL528_PLL12_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1304 PLL13 (For IPP) Clock Rate Register 0
//
#define PLL_PLL13_CR0_REG_OFS           0x1304
#define PLL_PLL13_CR1_REG_OFS           0x1308
#define PLL_PLL13_CR2_REG_OFS           0x130C

#define PLL528_PLL13_CR0_REG_OFS        (PLL528_PLL13_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL13_CR1_REG_OFS        (PLL528_PLL13_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL13_CR2_REG_OFS        (PLL528_PLL13_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x1228 PLL14 (For DMA2) Clock Rate Register 0
//
#define PLL_PLL14_CR0_REG_OFS           0x1228
#define PLL_PLL14_CR1_REG_OFS           0x122C
#define PLL_PLL14_CR2_REG_OFS           0x1230

#define PLL528_PLL14_CR0_REG_OFS        (PLL528_PLL14_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL14_CR1_REG_OFS        (PLL528_PLL14_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL14_CR2_REG_OFS        (PLL528_PLL14_BASE_REG_OFS+PLL_CR2_OFS)

//
//0x13DC PLL15 (For H265) Clock Rate Register 0
//
#define PLL_PLL15_CR0_REG_OFS           0x13DC
#define PLL_PLL15_CR1_REG_OFS           0x13E0
#define PLL_PLL15_CR2_REG_OFS           0x13E4

#define PLL528_PLL15_CR0_REG_OFS        (PLL528_PLL15_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL15_CR1_REG_OFS        (PLL528_PLL15_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL15_CR2_REG_OFS        (PLL528_PLL15_BASE_REG_OFS+PLL_CR2_OFS)

#define PLL528_PLL16_CR0_REG_OFS        (PLL528_PLL16_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL16_CR1_REG_OFS        (PLL528_PLL16_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL16_CR2_REG_OFS        (PLL528_PLL16_BASE_REG_OFS+PLL_CR2_OFS)

#define PLL528_PLL17_CR0_REG_OFS        (PLL528_PLL17_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL17_CR1_REG_OFS        (PLL528_PLL17_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL17_CR2_REG_OFS        (PLL528_PLL17_BASE_REG_OFS+PLL_CR2_OFS)

#define PLL528_PLL18_CR0_REG_OFS        (PLL528_PLL18_BASE_REG_OFS+PLL_CR0_OFS)
#define PLL528_PLL18_CR1_REG_OFS        (PLL528_PLL18_BASE_REG_OFS+PLL_CR1_OFS)
#define PLL528_PLL18_CR2_REG_OFS        (PLL528_PLL18_BASE_REG_OFS+PLL_CR2_OFS)



#define PLL_PLLX_SSPLL0_REG_OFS         0x0C // en,rst,new_mode,step_sel,mmu_syn_ssc,dssc
REGDEF_BEGIN(PLL_PLLX_SSPLL0_REG)
REGDEF_BIT(SSC_EN, 1)                           // 0: disable, 1: enable
REGDEF_BIT(SSC_RST, 1)
REGDEF_BIT(SSC_NEW_MODE, 1)                     // 0: legacy mode, 1: NT96650 new mode
REGDEF_BIT(, 1)
REGDEF_BIT(SSC_STEP_SEL, 2)
REGDEF_BIT(MMU_SYN_SSC, 1)
REGDEF_BIT(DSSC, 1)                             // 0: center spread, 1: down spread
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLLX_SSPLL0_REG)

#define PLL_PLLX_SSPLL1_REG_OFS          0x10 // mulfac
REGDEF_BEGIN(PLL_PLLX_SSPLL1_REG)
REGDEF_BIT(SSC_MULFAC, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLLX_SSPLL1_REG)

#define PLL_PLLX_SSPLL2_REG_OFS          0x14 // period_value
REGDEF_BEGIN(PLL_PLLX_SSPLL2_REG)
REGDEF_BIT(SSC_PERIOD_VALUE, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLLX_SSPLL2_REG)

//
//0x11C8 PLL4 (For SSPLL) Spread Spectrum Register 0
//
#define PLL_PLL4_SSPLL0_REG_OFS         0x11C8
REGDEF_BEGIN(PLL_PLL4_SSPLL0_REG)
REGDEF_BIT(SSC_RST, 1)
REGDEF_BIT(SSC_NEW_MODE, 1)                     // 0: legacy mode, 1: NT96650 new mode
REGDEF_BIT(SSC_STEP_SEL, 2)
REGDEF_BIT(, 2)
REGDEF_BIT(DSSC, 1)                             // 0: center spread, 1: down spread
REGDEF_BIT(reserved1, 25)
REGDEF_END(PLL_PLL4_SSPLL0_REG)

//
//0x11CC PLL4 (For SSPLL) Spread Spectrum Register 1
//
#define PLL_PLL4_SSPLL1_REG_OFS         0x11CC
REGDEF_BEGIN(PLL_PLL4_SSPLL1_REG)
REGDEF_BIT(SSC_EN, 1)                           // 0: disable, 1: enable
REGDEF_BIT(SSC_RATIO, 4)
REGDEF_BIT(SSC_FREQ, 3)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLL4_SSPLL1_REG)

//
//0x11D0 PLL4 (For SSPLL) Spread Spectrum Register 2
//
#define PLL_PLL4_SSPLL2_REG_OFS         0x11D0
REGDEF_BEGIN(PLL_PLL4_SSPLL2_REG)
REGDEF_BIT(SSC_MULFAC, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLL4_SSPLL2_REG)

//
//0x11D4 PLL4 (For SSPLL) Spread Spectrum Register 3
//
#define PLL_PLL4_SSPLL3_REG_OFS         0x11D4
REGDEF_BEGIN(PLL_PLL4_SSPLL3_REG)
REGDEF_BIT(SSC_PERIOD_VALUE, 8)
REGDEF_BIT(reserved1, 24)
REGDEF_END(PLL_PLL4_SSPLL3_REG)





#endif
