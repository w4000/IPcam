/**
	@brief Header file of definition of vendor net flow sample.

	@file net_flow_sample.h

	@ingroup net_flow_sample

	@note Nothing.

	Copyright Novatek Microelectronics Corp. 2018.  All rights reserved.
*/
#ifndef _KFLOW_AI_NET_H_
#define _KFLOW_AI_NET_H_

/********************************************************************
	INCLUDE FILES
********************************************************************/
#ifdef __KERNEL__
#include <linux/ioctl.h>
#endif
#include "kflow_ai_net_comm.h"
#include "nn_net.h"
#include "kwrap/ioctl.h"
#include "kwrap/semaphore.h"

/********************************************************************
	TYPE DEFINITION
********************************************************************/
/**
	Parameters of net flow device memory
*/
typedef struct _VENDOR_AIS_FLOW_MEM_PARM {
	UINT32 pa;
	UINT32 va;
	UINT32 size;
#if defined(_BSP_NA51068_)
	INT32  blk; // for mem free
#endif
} VENDOR_AIS_FLOW_MEM_PARM;

/**
	Parameters of net flow device memory: user-space and kernel-space mapping
*/
typedef struct _VENDOR_AIS_FLOW_MAP_MEM_PARM {
	VENDOR_AIS_FLOW_MEM_PARM user_parm;
	VENDOR_AIS_FLOW_MEM_PARM user_model;
	VENDOR_AIS_FLOW_MEM_PARM user_buff;
	VENDOR_AIS_FLOW_MEM_PARM kerl_parm;
} VENDOR_AIS_FLOW_MAP_MEM_PARM;


/**
*/
typedef struct _VENDOR_AIS_FLOW_MAP_MEM_INFO {
	VENDOR_AIS_FLOW_MAP_MEM_PARM parm;
	UINT32 net_id;
} VENDOR_AIS_FLOW_MAP_MEM_INFO;

/**
*/
typedef struct _VENDOR_AIS_FLOW_CORE_INFO {
	UINT32 info;
} VENDOR_AIS_FLOW_CORE_INFO;

/**
*/
typedef struct _VENDOR_AIS_FLOW_CORE_CFG {
	UINT32 schd;
	UINT32 chk_interval;
} VENDOR_AIS_FLOW_CORE_CFG;

/**
*/
typedef struct _VENDOR_AIS_FLOW_JOBLIST_INFO {
	UINT32 proc_id;
	UINT32 max_job_cnt;
	UINT32 job_cnt;
	UINT32 bind_cnt;
	UINT32 ddr_id;
} VENDOR_AIS_FLOW_JOBLIST_INFO;

/**
*/
typedef struct _VENDOR_AIS_FLOW_JOB_INFO {
	UINT32 proc_id;
	UINT32 job_id;
	UINT32 info;
	UINT32 info2;
	UINT32 engine_id;
	UINT32 engine_op;
	UINT32 schd_parm;
	INT32 wait_ms;
	INT32 rv;
} VENDOR_AIS_FLOW_JOB_INFO;

/**
*/
/*
typedef struct _VENDOR_AIS_FLOW_JOB_WAI {
	UINT32 proc_id;
	UINT32 job_id;
} VENDOR_AIS_FLOW_JOB_WAI;

typedef struct _VENDOR_AIS_FLOW_JOB_SIG {
	UINT32 proc_id;
	UINT32 job_id;
} VENDOR_AIS_FLOW_JOB_SIG;
*/

typedef struct _VENDOR_AIS_FLOW_CPU_WAI {
	UINT32 proc_id;
	UINT32 job_id;
} VENDOR_AIS_FLOW_CPU_WAI;

typedef struct _VENDOR_AIS_FLOW_CPU_SIG {
	UINT32 proc_id;
	UINT32 job_id;
} VENDOR_AIS_FLOW_CPU_SIG;

typedef struct _VENDOR_AIS_FLOW_DSP_WAI {
	UINT32 proc_id;
	UINT32 job_id;
} VENDOR_AIS_FLOW_DSP_WAI;

typedef struct _VENDOR_AIS_FLOW_DSP_SIG {
	UINT32 proc_id;
	UINT32 job_id;
} VENDOR_AIS_FLOW_DSP_SIG;

#define CORE_MAX   16

typedef struct _VENDOR_AIS_CORE_UT {
    CHAR   name[8];  ///< name
    UINT32 time;     ///< time
    UINT32 util;     ///< utility
} VENDOR_AIS_CORE_UT;

typedef struct _VENDOR_AIS_PERF_UT {
    UINT32 core_count;
    VENDOR_AIS_CORE_UT core[CORE_MAX];
} VENDOR_AIS_PERF_UT;

typedef struct _KFLOW_AI_OP_FC_CMDBUF {
	UINT32 proc_id;
	UINT32 buf_size;
    UINT32 buf_pa;
    UINT32 buf_va;
} KFLOW_AI_OP_FC_CMDBUF;

#define KFLOW_AI_MAX_CMD_LENGTH	200
typedef struct _KFLOW_AI_IOC_CMD_OUT {
	UINT32 proc_id;
	CHAR str[KFLOW_AI_MAX_CMD_LENGTH];
	UINT32 len;
} KFLOW_AI_IOC_CMD_OUT;

/**
*/
typedef struct _VENDOR_AIS_FLOW_PROC_PARM {
	BOOL is_nonblock;
	UINT32 time_out_ms;		///< set 0 for disable time out
	UINT32 net_addr;
	UINT32 start_layer;
	UINT32 end_layer;
} VENDOR_AIS_FLOW_PROC_PARM;

typedef struct _VENDOR_AI_NET_LAYER {
	UINT32 engine_id;
	UINT32 engine_op;
	UINT32 next_cnt;
	UINT32* next_layer_id;
	void* more_info;
} VENDOR_AI_NET_LAYER;

/**
*/
typedef struct _VENDOR_AIS_FLOW_PROC_INFO {
	VENDOR_AIS_FLOW_PROC_PARM parm;
	UINT32 net_id;
} VENDOR_AIS_FLOW_PROC_INFO;

/**
*/
typedef struct _VENDOR_AIS_FLOW_PROC_INPUT_INFO {
	UINT32 net_addr;
#if CNN_25_MATLAB
	NN_IOMEM iomem;
#else
	NN_DATA imem[NN_IMEM_NUM];
#endif
	UINT32 net_id;
#if CNN_MULTI_INPUT
	UINT32 proc_idx;
#endif
} VENDOR_AIS_FLOW_PROC_INPUT_INFO;

/**
*/
typedef struct _VENDOR_AIS_FLOW_UPDATE_INFO {
	UINT32 layer;
	UINT32 net_id;
} VENDOR_AIS_FLOW_UPDATE_INFO;

/**
*/
typedef struct _VENDOR_AIS_FLOW_LL_BASE {
	UINT32 eng;				///< kdrv ai engine
	UINT32 addr;			///< ll base address
	UINT32 net_id;
} VENDOR_AIS_FLOW_LL_BASE;

/**
*/
typedef struct _VENDOR_AIS_FLOW_MEM_OFS {
	UINT32 eng;				///< kdrv ai engine
	UINT32 ofs; 			///< memory offset would like to shift
	UINT32 net_id;
} VENDOR_AIS_FLOW_MEM_OFS;

/**
*/
typedef struct _VENDOR_AIS_FLOW_VERS {
	UINT32 proc_id;         ///< proc_id
	UINT32 chip_id;         ///< chip_id
	UINT32 gentool_vers;    ///< gentool version
	INT    rv;              ///< version check result
} VENDOR_AIS_FLOW_VERS;

typedef struct _VENDOR_AIS_FLOW_ID {
	UINT32 net_id;
	UINT32 ai_support_net_max;
} VENDOR_AIS_FLOW_ID;

typedef struct _VENDOR_AIS_MEM_INFO {
	UINT32 value[8];
} VENDOR_AIS_MEM_INFO;

/**
*/
typedef struct _VENDOR_AIS_DIFF_MODEL_INFO {
	UINT32 input_width;
	UINT32 input_height;
	UINT32 id;
} VENDOR_AIS_DIFF_MODEL_INFO;

typedef struct _VENDOR_AIS_FLOW_UPDATE_NET_INFO {
	VENDOR_AIS_FLOW_MAP_MEM_PARM map_parm;
	UINT32 net_info_pa;
	UINT32 net_info_size;
	UINT32 model_id;
	UINT32 net_id;
} VENDOR_AIS_FLOW_UPDATE_NET_INFO;

typedef struct _VENDOR_AIS_DIFF_BATCH_MODEL_INFO {
	UINT32 batch_num;
	UINT32 id;
} VENDOR_AIS_DIFF_BATCH_MODEL_INFO;

typedef struct _VENDOR_AIS_FLOW_KERL_START_MEM {
	VENDOR_AIS_FLOW_MEM_PARM kerl_parm;
	VENDOR_AIS_FLOW_MEM_PARM user_buff;
	UINT32 proc_id;
} VENDOR_AIS_FLOW_KERL_START_MEM;

#if CNN_AI_FASTBOOT
typedef struct _VENDOR_AIS_FLOW_FBOOT_RSLT {
	VENDOR_AIS_FLOW_MEM_PARM kerl_parm;
	VENDOR_AIS_FLOW_MEM_PARM user_buff;
	UINT32 proc_id;
} VENDOR_AIS_FLOW_FBOOT_RSLT;
#endif

#define VENDOR_AI_VERSION_LEN	20
typedef struct _KFLOW_AI_IOC_VERSION {
	UINT32 vendor_ai_version;
	CHAR vendor_ai_impl_version[VENDOR_AI_VERSION_LEN];
} KFLOW_AI_IOC_VERSION;

typedef struct _KFLOW_AI_MODEL_VERSION {
	UINT32 proc_id;         ///< proc_id
	UINT32 nn_chip;         ///< NN_CHIP_FMT + NN_CHIP_ID
	UINT32 gentool_vers;    ///< gentool version
	UINT32 real_chip;       ///< CHIP_ID
} KFLOW_AI_MODEL_VERSION;

typedef struct _KFLOW_AI_IOC_DEBUG_INFO {
	UINT32 kcmd_proc_id;
	UINT32 kcmd_proc_trace;
	UINT32 kcmd_group_dump_bmp;
	UINT32 kcmd_iomem_dump_bmp;
	INT32 kcmd_set_preserve_bufid;
} KFLOW_AI_IOC_DEBUG_INFO;

/********************************************************************
	MACRO CONSTANT DEFINITIONS
********************************************************************/
#define VENDOR_AIS_FLOW_DEV_NAME                "kflow_ai_net"

#define VENDOR_AIS_FLOW_IOC_MAGIC               'f'

/*
#define VENDOR_AIS_FLOW_IOC_GET_MEM_TYPE        _VOS_IOR (VENDOR_AIS_FLOW_IOC_MAGIC,  1, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_MEM_TYPE        _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  2, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_GET_MEM_OFFSET      _VOS_IOR (VENDOR_AIS_FLOW_IOC_MAGIC,  3, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_MEM_OFFSET      _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  4, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_GET_MEM_LIMITSZ     _VOS_IOR (VENDOR_AIS_FLOW_IOC_MAGIC,  5, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_MEM_LIMITSZ     _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  6, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_INIT            _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  7, VENDOR_AIS_FLOW_IOC_INIT_PARM *)
#define VENDOR_AIS_FLOW_IOC_SET_UNINIT          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  8, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_GET_CONFIG          _VOS_IOR (VENDOR_AIS_FLOW_IOC_MAGIC,  9, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_CONFIG          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 10, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_PROCESS         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 11, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_GET_RESULT          _VOS_IOR (VENDOR_AIS_FLOW_IOC_MAGIC, 12, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_GET_MEM             _VOS_IOR (VENDOR_AIS_FLOW_IOC_MAGIC, 13, VENDOR_AIS_FLOW_IOC_PARM)
#define VENDOR_AIS_FLOW_IOC_SET_MEM             _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 14, VENDOR_AIS_FLOW_IOC_PARM)
*/
#define VENDOR_AIS_FLOW_IOC_VERS                _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  1, VENDOR_AIS_FLOW_VERS)
#define VENDOR_AIS_FLOW_IOC_GET_VER             _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  2, void*)
#if (NN_USER_HEAP == 1)
#define VENDOR_AIS_FLOW_IOC_GET_NUM             _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  3, VENDOR_AIS_FLOW_ID)
#endif
#define VENDOR_AIS_FLOW_IOC_MEM_INFO       		_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC,  4, VENDOR_AIS_MEM_INFO)
	
#define VENDOR_AIS_FLOW_IOC_NET_RESET           _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 10, VENDOR_AIS_FLOW_ID)
#define VENDOR_AIS_FLOW_IOC_NET_INIT            _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 11, VENDOR_AIS_FLOW_ID)
#define VENDOR_AIS_FLOW_IOC_NET_UNINIT          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 12, VENDOR_AIS_FLOW_ID)
#define VENDOR_AIS_FLOW_IOC_NET_LOCK            _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 13, VENDOR_AIS_FLOW_ID)
#define VENDOR_AIS_FLOW_IOC_NET_UNLOCK          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 14, VENDOR_AIS_FLOW_ID)

#define VENDOR_AIS_FLOW_IOC_REMAP_ADDR          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 15, VENDOR_AIS_FLOW_MAP_MEM_INFO)
#define VENDOR_AIS_FLOW_IOC_UNMAP_ADDR          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 16, VENDOR_AIS_FLOW_MAP_MEM_INFO)
#define VENDOR_AIS_FLOW_IOC_PARS_MODEL          _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 17, VENDOR_AIS_FLOW_MAP_MEM_INFO)
#define VENDOR_AIS_FLOW_IOC_UNPARS_MODEL        _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 18, VENDOR_AIS_FLOW_MAP_MEM_INFO)
#define VENDOR_AIS_FLOW_IOC_INPUT_INIT         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 19, VENDOR_AIS_FLOW_PROC_INPUT_INFO)
#define VENDOR_AIS_FLOW_IOC_INPUT_UNINIT        _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 20, VENDOR_AIS_FLOW_PROC_INPUT_INFO)
#define VENDOR_AIS_FLOW_IOC_UPDATE_PARM         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 21, VENDOR_AIS_FLOW_UPDATE_INFO)
#define VENDOR_AIS_FLOW_IOC_LL_BASE             _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 22, VENDOR_AIS_FLOW_LL_BASE)
// only for FPGA test
#define VENDOR_AIS_FLOW_IOC_MEM_OFS             _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 23, VENDOR_AIS_FLOW_MEM_OFS)

/*
#define VENDOR_AIS_FLOW_IOC_SWITCH_PROC         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 25, VENDOR_AIS_FLOW_PROC_INFO)
*/

#define VENDOR_AIS_FLOW_IOC_PROC_UPDATE_INFO    _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 26, VENDOR_AIS_FLOW_PROC_INFO)
#define VENDOR_AIS_FLOW_IOC_RESTORE_UPDATE_INFO _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 27, VENDOR_AIS_FLOW_PROC_INFO)
#define VENDOR_AIS_FLOW_IOC_PROC_UPDATE_BATCH_INFO    _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 28, VENDOR_AIS_FLOW_UPDATE_NET_INFO)
#define VENDOR_AIS_FLOW_IOC_RESTORE_UPDATE_BATCH_INFO _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 29, VENDOR_AIS_FLOW_UPDATE_NET_INFO)

//CORE
#define VENDOR_AIS_FLOW_IOC_CORE_RESET         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 30, VENDOR_AIS_FLOW_CORE_INFO)
#define VENDOR_AIS_FLOW_IOC_CORE_INIT         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 31, VENDOR_AIS_FLOW_CORE_INFO)
#define VENDOR_AIS_FLOW_IOC_CORE_UNINIT         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 32, VENDOR_AIS_FLOW_CORE_INFO)
//JOB
#define VENDOR_AIS_FLOW_IOC_NEW_JOBLIST         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 33, VENDOR_AIS_FLOW_JOBLIST_INFO)
#define VENDOR_AIS_FLOW_IOC_DEL_JOBLIST         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 34, VENDOR_AIS_FLOW_JOBLIST_INFO)
#define VENDOR_AIS_FLOW_IOC_DUMP_JOBLIST        _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 35, VENDOR_AIS_FLOW_JOBLIST_INFO)

#define VENDOR_AIS_FLOW_IOC_CORE_CFGSCHD        _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 39, VENDOR_AIS_FLOW_CORE_INFO)

#define VENDOR_AIS_FLOW_IOC_CLR_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 40, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_CLR_JOB3        	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 38, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_SET_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 41, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_BIND_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 42, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_UNBIND_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 43, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_PUSH_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 44, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_PULL_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 45, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_LOCK_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 46, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_UNLOCK_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 47, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_SET_JOB2         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 48, VENDOR_AIS_FLOW_JOB_INFO)
#define VENDOR_AIS_FLOW_IOC_SET_JOB3         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 49, VENDOR_AIS_FLOW_JOB_INFO)

#define VENDOR_AIS_FLOW_IOC_WAI_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 50, VENDOR_AIS_FLOW_JOB_WAI)
#define VENDOR_AIS_FLOW_IOC_SIG_JOB         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 51, VENDOR_AIS_FLOW_JOB_SIG)
#define VENDOR_AIS_FLOW_IOC_WAI_CPU         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 52, VENDOR_AIS_FLOW_CPU_WAI)
#define VENDOR_AIS_FLOW_IOC_SIG_CPU         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 53, VENDOR_AIS_FLOW_CPU_SIG)
#define VENDOR_AIS_FLOW_IOC_WAI_DSP         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 54, VENDOR_AIS_FLOW_DSP_WAI)
#define VENDOR_AIS_FLOW_IOC_SIG_DSP         	_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 55, VENDOR_AIS_FLOW_DSP_SIG)

#define VENDOR_AIS_FLOW_IOC_CORE_CFGCHK         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 56, VENDOR_AIS_FLOW_CORE_INFO)

#define KFLOW_AI_IOC_CMD_OUT_INIT     			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 60, KFLOW_AI_IOC_CMD_OUT)
#define KFLOW_AI_IOC_CMD_OUT_UNINIT     		_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 61, KFLOW_AI_IOC_CMD_OUT)
#define KFLOW_AI_IOC_CMD_OUT_PROG_DEBUG  		_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 62, KFLOW_AI_IOC_CMD_OUT)
#define KFLOW_AI_IOC_CMD_OUT_RUN_DEBUG  		_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 63, KFLOW_AI_IOC_CMD_OUT)
#define KFLOW_AI_IOC_CMD_OUT_WAI     			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 64, KFLOW_AI_IOC_CMD_OUT)
#define KFLOW_AI_IOC_CMD_OUT_SIG     			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 65, KFLOW_AI_IOC_CMD_OUT)
#define KFLOW_AI_IOC_SET_VERSION     			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 66, KFLOW_AI_IOC_VERSION)
#define KFLOW_AI_IOC_GET_DEBUG_INFO    			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 67, KFLOW_AI_IOC_DEBUG_INFO)
#define KFLOW_AI_IOC_CMD_PERF_UT_BEGIN     		_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 68, UINT32)
#define KFLOW_AI_IOC_CMD_PERF_UT_END			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 69, VENDOR_AIS_PERF_UT)

#if CNN_AI_FASTBOOT
#define VENDOR_AIS_FLOW_IOC_KERL_START_MEM      _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 70, VENDOR_AIS_FLOW_MEM_PARM)
#define VENDOR_AIS_FLOW_IOC_GET_FBOOT_RSLT      _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 71, KFLOW_AI_BUILTIN_RSLT_INFO)
#define VENDOR_AIS_FLOW_IOC_GET_FBOOT_DUMP_EN   _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 72, UINT32)
#define VENDOR_AIS_FLOW_IOC_IS_FASTBOOT         _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 73, INT)
#define VENDOR_AIS_FLOW_IOC_GET_BUILTIN_MEM     _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 74, VENDOR_AIS_FLOW_MAP_MEM_PARM)
#define VENDOR_AIS_FLOW_IOC_IS_PRELOAD_MODEL    _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 75, INT)
#endif

#define KFLOW_AI_IOC_CMD_DMA_ABORT     			_VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 80, void*)

#define VENDOR_AIS_FLOW_IOC_GET_FC_CMD_SIZE     _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 90, void*)
#define VENDOR_AIS_FLOW_IOC_SET_FC_LL_CMD       _VOS_IOWR(VENDOR_AIS_FLOW_IOC_MAGIC, 91, void*)

#if defined (__UITRON) || defined(__ECOS)  || defined (__FREERTOS)
int vendor_ais_flow_miscdev_ioctl(int fd, unsigned int cmd, void *arg);
int kflow_ai_net_ioctl(int fd, unsigned int cmd, void *arg);
#endif

#if CNN_AI_FASTBOOT
extern ER nvt_ai_get_kerl_start_mem(UINT32 net_id, VENDOR_AIS_FLOW_KERL_START_MEM *p_kerl_start);
extern ER nvt_ai_get_fboot_dump_en(UINT32 net_id, UINT32 *p_enable);
extern ER nvt_ai_fix_fastboot_mem_va(VENDOR_AIS_FLOW_MAP_MEM_PARM *p_mem, UINT32 net_id);
#endif

#endif  /* _KFLOW_AI_NET_H_ */
