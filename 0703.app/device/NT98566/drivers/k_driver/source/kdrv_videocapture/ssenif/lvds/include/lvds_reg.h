/*
    LVDS/HiSPi Controller register header

    LVDS/HiSPi Controller register header

    @file       lvds_reg.h
    @ingroup    mIDrvIO_LVDS
    @note       Nothing

    Copyright   Novatek Microelectronics Corp. 2016.  All rights reserved.
*/
#ifndef __LVDS_REG_H__
#define __LVDS_REG_H__

#ifndef __KERNEL__
#include "rcw_macro.h"
#include "kwrap/type.h"
#else
#include "mach/rcw_macro.h"
#include "kwrap/type.h"
#endif


// 0x00 LVDS/HiSPi Control Register 0
REGDEF_OFFSET(LVDS_CTRL0_REG, 0x00)
REGDEF_BEGIN(LVDS_CTRL0_REG)
REGDEF_BIT(LVDS_EN, 1)
REGDEF_BIT(FORCE_EN, 1)
REGDEF_BIT(FIFO_RST, 1)
REGDEF_BIT(, 1)
REGDEF_BIT(DESKEW_EN, 1)
REGDEF_BIT(LOCK_CLEAR, 1)
REGDEF_BIT(, 10)
REGDEF_BIT(DBG_SEL, 4)
REGDEF_BIT(, 12)
REGDEF_END(LVDS_CTRL0_REG)


// 0x04 LVDS/HiSPi Control Register 1
REGDEF_OFFSET(LVDS_CTRL1_REG, 0x04)
REGDEF_BEGIN(LVDS_CTRL1_REG)
REGDEF_BIT(PIXEL_DEPTH, 3)
REGDEF_BIT(, 1)
REGDEF_BIT(DAT_LANE_NUM, 3)
REGDEF_BIT(, 1)
REGDEF_BIT(CLK_LANE_NUM, 1)
REGDEF_BIT(DATA_IN_ORDER, 1)
REGDEF_BIT(CROP_PIXEL_BIT_ORDER, 1)
REGDEF_BIT(ROUND_EN, 1)
REGDEF_BIT(VSYNC_GEN_METHOD, 2)
REGDEF_BIT(VD_GEN_WITH_HD, 1)
REGDEF_BIT(, 1)
REGDEF_BIT(CROP_ALIGN, 3)
REGDEF_BIT(, 1)
REGDEF_BIT(SYNC_LEN, 3)
REGDEF_BIT(, 1)
REGDEF_BIT(HD_GATING, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(FRAMESET_OFS, 4)
REGDEF_END(LVDS_CTRL1_REG)

// 0x08 LVDS/HiSPi Control Register 2
REGDEF_OFFSET(LVDS_CTRL2_REG, 0x08)
REGDEF_BEGIN(LVDS_CTRL2_REG)
REGDEF_BIT(CHID_BIT0_OFS, 4)
REGDEF_BIT(CHID_BIT1_OFS, 4)
REGDEF_BIT(CHID_BIT2_OFS, 4)
REGDEF_BIT(CHID_BIT3_OFS, 4)
REGDEF_BIT(VALID_CHID, 4)
REGDEF_BIT(VALID_CHID2, 4)
REGDEF_BIT(VALID_CHID3, 4)
REGDEF_BIT(VALID_CHID4, 4)
REGDEF_END(LVDS_CTRL2_REG)

// 0x0C LVDS/HiSPi Control Register 3
REGDEF_OFFSET(LVDS_CTRL3_REG, 0x0C)
REGDEF_BEGIN(LVDS_CTRL3_REG)
REGDEF_BIT(DISABLE_SRC, 2)
REGDEF_BIT(, 30)
REGDEF_END(LVDS_CTRL3_REG)

// 0x10 LVDS/HiSPi HD-SYNC WORD Register 0
REGDEF_OFFSET(LVDS_HDSYNC0_REG, 0x10)
REGDEF_BEGIN(LVDS_HDSYNC0_REG)
REGDEF_BIT(SYNC_WORD1, 16)
REGDEF_BIT(SYNC_WORD2, 16)
REGDEF_END(LVDS_HDSYNC0_REG)


// 0x14 LVDS/HiSPi HD-SYNC WORD Register 1
REGDEF_OFFSET(LVDS_HDSYNC1_REG, 0x14)
REGDEF_BEGIN(LVDS_HDSYNC1_REG)
REGDEF_BIT(SYNC_WORD3, 16)
REGDEF_BIT(SYNC_WORD4, 16)
REGDEF_END(LVDS_HDSYNC1_REG)


// 0x18 LVDS/HiSPi HD-SYNC WORD Register 2
REGDEF_OFFSET(LVDS_HDSYNC2_REG, 0x18)
REGDEF_BEGIN(LVDS_HDSYNC2_REG)
REGDEF_BIT(SYNC_WORD5, 16)
REGDEF_BIT(SYNC_WORD6, 16)
REGDEF_END(LVDS_HDSYNC2_REG)


// 0x1C LVDS/HiSPi HD-SYNC WORD Register 3
REGDEF_OFFSET(LVDS_HDSYNC3_REG, 0x1C)
REGDEF_BEGIN(LVDS_HDSYNC3_REG)
REGDEF_BIT(SYNC_WORD7, 16)
REGDEF_BIT(, 16)
REGDEF_END(LVDS_HDSYNC3_REG)







// LVDS/HiSPi DataLane-0~9 Control Register 0
REGDEF_OFFSET(LVDS_DL0CTRL0_REG, 0x20)
REGDEF_OFFSET(LVDS_DL1CTRL0_REG, 0x30)
REGDEF_OFFSET(LVDS_DL2CTRL0_REG, 0x40)
REGDEF_OFFSET(LVDS_DL3CTRL0_REG, 0x50)
REGDEF_OFFSET(LVDS_DL4CTRL0_REG, 0x60)
REGDEF_OFFSET(LVDS_DL5CTRL0_REG, 0x70)
REGDEF_OFFSET(LVDS_DL6CTRL0_REG, 0x80)
REGDEF_OFFSET(LVDS_DL7CTRL0_REG, 0x90)
REGDEF_OFFSET(LVDS_DL8CTRL0_REG, 0xA0)
REGDEF_OFFSET(LVDS_DL9CTRL0_REG, 0xB0)

REGDEF_BEGIN(LVDS_DL0CTRL0_REG)
REGDEF_BIT(CTRL_W_VD, 16)
REGDEF_BIT(CTRL_W_HD, 16)
REGDEF_END(LVDS_DL0CTRL0_REG)


// 0x24 LVDS/HiSPi DataLane-0 Control Register 1
REGDEF_OFFSET(LVDS_DL0CTRL1_REG, 0x24)
REGDEF_BEGIN(LVDS_DL0CTRL1_REG)
REGDEF_BIT(CW_VD_VALID, 16)
REGDEF_BIT(CW_HD_VALID, 16)
REGDEF_END(LVDS_DL0CTRL1_REG)


// 0x28 LVDS/HiSPi DataLane-0 Control Register 2
REGDEF_OFFSET(LVDS_DL0CTRL2_REG, 0x28)
REGDEF_BEGIN(LVDS_DL0CTRL2_REG)
REGDEF_BIT(CW_VALUE, 16)
REGDEF_BIT(CTRL_W_VD2, 16)
REGDEF_END(LVDS_DL0CTRL2_REG)


// 0x2C LVDS/HiSPi DataLane-0 Control Register 3
REGDEF_OFFSET(LVDS_DL0CTRL3_REG, 0x2C)
REGDEF_BEGIN(LVDS_DL0CTRL3_REG)
REGDEF_BIT(CTRL_W_VD3, 16)
REGDEF_BIT(CTRL_W_VD4, 16)
REGDEF_END(LVDS_DL0CTRL3_REG)



// 0x100 LVDS/HiSPi Interrupt Enable Register
REGDEF_OFFSET(LVDS_INTEN_REG, 0x100)
REGDEF_BEGIN(LVDS_INTEN_REG)
REGDEF_BIT(INTE_VD, 1)
REGDEF_BIT(INTE_HD, 1)
REGDEF_BIT(INTE_FRMEND, 1)
REGDEF_BIT(INTE_PIXCNT_ERR, 1)
REGDEF_BIT(INTE_FIFO_ERR, 1)
REGDEF_BIT(INTE_FIFO_OV, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(INTE_VD2, 1)
REGDEF_BIT(INTE_HD2, 1)
REGDEF_BIT(INTE_FRMEND2, 1)
REGDEF_BIT(INTE_PIXCNT_ERR2, 1)
REGDEF_BIT(INTE_FIFO_ERR2, 1)
REGDEF_BIT(INTE_FIFO_OV2, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(INTE_VD3, 1)
REGDEF_BIT(INTE_HD3, 1)
REGDEF_BIT(INTE_FRMEND3, 1)
REGDEF_BIT(INTE_PIXCNT_ERR3, 1)
REGDEF_BIT(INTE_FIFO_ERR3, 1)
REGDEF_BIT(INTE_FIFO_OV3, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(INTE_VD4, 1)
REGDEF_BIT(INTE_HD4, 1)
REGDEF_BIT(INTE_FRMEND4, 1)
REGDEF_BIT(INTE_PIXCNT_ERR4, 1)
REGDEF_BIT(INTE_FIFO_ERR4, 1)
REGDEF_BIT(INTE_FIFO_OV4, 1)
REGDEF_BIT(, 2)
REGDEF_END(LVDS_INTEN_REG)


// 0x104 LVDS/HiSPi Interrupt Status Register
REGDEF_OFFSET(LVDS_INTSTS_REG, 0x104)
REGDEF_BEGIN(LVDS_INTSTS_REG)
REGDEF_BIT(VD_STS, 1)
REGDEF_BIT(HD_STS, 1)
REGDEF_BIT(FRMEND_STS, 1)
REGDEF_BIT(PIXCNT_ERR_STS, 1)
REGDEF_BIT(FIFO_ERR_STS, 1)
REGDEF_BIT(FIFO_OV_STS, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(VD2_STS, 1)
REGDEF_BIT(HD2_STS, 1)
REGDEF_BIT(FRMEND2_STS, 1)
REGDEF_BIT(PIXCNT_ERR2_STS, 1)
REGDEF_BIT(FIFO_ERR2_STS, 1)
REGDEF_BIT(FIFO_OV2_STS, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(VD3_STS, 1)
REGDEF_BIT(HD3_STS, 1)
REGDEF_BIT(FRMEND3_STS, 1)
REGDEF_BIT(PIXCNT_ERR3_STS, 1)
REGDEF_BIT(FIFO_ERR3_STS, 1)
REGDEF_BIT(FIFO_OV3_STS, 1)
REGDEF_BIT(, 2)
REGDEF_BIT(VD4_STS, 1)
REGDEF_BIT(HD4_STS, 1)
REGDEF_BIT(FRMEND4_STS, 1)
REGDEF_BIT(PIXCNT_ERR4_STS, 1)
REGDEF_BIT(FIFO_ERR4_STS, 1)
REGDEF_BIT(FIFO_OV4_STS, 1)
REGDEF_BIT(, 2)
REGDEF_END(LVDS_INTSTS_REG)


// 0x108 LVDS/HiSPi Control Counter Register 0
REGDEF_OFFSET(LVDS_CTLCOUNT_REG, 0x108)
REGDEF_BEGIN(LVDS_CTLCOUNT_REG)
REGDEF_BIT(PIXCNT_PER_LINE, 15)
REGDEF_BIT(, 1)
REGDEF_BIT(FRMEND_LINE_CNT, 16)
REGDEF_END(LVDS_CTLCOUNT_REG)


// 0x10C LVDS/HiSPi DROP Pixel Control Register 0
REGDEF_OFFSET(LVDS_PIXDROP_CTRL0_REG, 0x10C)
REGDEF_BEGIN(LVDS_PIXDROP_CTRL0_REG)
REGDEF_BIT(DROP_PIXEL_EN, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(PIXDROP_LEN, 6)
REGDEF_BIT(, 6)
REGDEF_BIT(LINE_DROP_LEN, 6)
REGDEF_BIT(, 10)
REGDEF_END(LVDS_PIXDROP_CTRL0_REG)


// 0x110 LVDS/HiSPi DROP Pixel Control Register 1
REGDEF_OFFSET(LVDS_PIXDROP_CTRL1_REG, 0x110)
REGDEF_BEGIN(LVDS_PIXDROP_CTRL1_REG)
REGDEF_BIT(DROP_PIXEL_0, 32)
REGDEF_END(LVDS_PIXDROP_CTRL1_REG)


// 0x114 LVDS/HiSPi DROP Pixel Control Register 2
REGDEF_OFFSET(LVDS_PIXDROP_CTRL2_REG, 0x114)
REGDEF_BEGIN(LVDS_PIXDROP_CTRL2_REG)
REGDEF_BIT(DROP_PIXEL_1, 32)
REGDEF_END(LVDS_PIXDROP_CTRL2_REG)


// 0x118 LVDS/HiSPi DROP Pixel Control Register 3
REGDEF_OFFSET(LVDS_PIXDROP_CTRL3_REG, 0x118)
REGDEF_BEGIN(LVDS_PIXDROP_CTRL3_REG)
REGDEF_BIT(DROP_LINE_0, 32)
REGDEF_END(LVDS_PIXDROP_CTRL3_REG)


// 0x11C LVDS/HiSPi DROP Pixel Control Register 4
REGDEF_OFFSET(LVDS_PIXDROP_CTRL4_REG, 0x11C)
REGDEF_BEGIN(LVDS_PIXDROP_CTRL4_REG)
REGDEF_BIT(DROP_LINE_1, 32)
REGDEF_END(LVDS_PIXDROP_CTRL4_REG)


// 0x120 LVDS/HiSPi Pixel Out Re-Order Register 0
REGDEF_OFFSET(LVDS_REORDER0_REG, 0x120)
REGDEF_BEGIN(LVDS_REORDER0_REG)
REGDEF_BIT(OUT_1, 4)
REGDEF_BIT(OUT_2, 4)
REGDEF_BIT(OUT_3, 4)
REGDEF_BIT(OUT_4, 4)
REGDEF_BIT(OUT_5, 4)
REGDEF_BIT(OUT_6, 4)
REGDEF_BIT(OUT_7, 4)
REGDEF_BIT(OUT_8, 4)
REGDEF_END(LVDS_REORDER0_REG)


// 0x124 LVDS/HiSPi Pixel Out Re-Order Register 1
REGDEF_OFFSET(LVDS_REORDER1_REG, 0x124)
REGDEF_BEGIN(LVDS_REORDER1_REG)
REGDEF_BIT(OUT_9, 4)
REGDEF_BIT(OUT_10, 4)
REGDEF_BIT(, 24)
REGDEF_END(LVDS_REORDER1_REG)


// 0x128 LVDS/HiSPi Input Valid Lane Select Register
REGDEF_OFFSET(LVDS_INPUTSEL_REG, 0x128)
REGDEF_BEGIN(LVDS_INPUTSEL_REG)
REGDEF_BIT(D0_VALID, 1)
REGDEF_BIT(D1_VALID, 1)
REGDEF_BIT(D2_VALID, 1)
REGDEF_BIT(D3_VALID, 1)
REGDEF_BIT(D4_VALID, 1)
REGDEF_BIT(D5_VALID, 1)
REGDEF_BIT(D6_VALID, 1)
REGDEF_BIT(D7_VALID, 1)
REGDEF_BIT(D8_VALID, 1)
REGDEF_BIT(D9_VALID, 1)
REGDEF_BIT(, 22)
REGDEF_END(LVDS_INPUTSEL_REG)


// 0x130 LVDS/HiSPi Control Counter Register 1
REGDEF_OFFSET(LVDS_CTLCOUNT1_REG, 0x130)
REGDEF_BEGIN(LVDS_CTLCOUNT1_REG)
REGDEF_BIT(FRMEND2_LINE_CNT, 16)
REGDEF_BIT(, 16)
REGDEF_END(LVDS_CTLCOUNT1_REG)

// 0x134 LVDS/HiSPi Control Counter Register 2
REGDEF_OFFSET(LVDS_CTLCOUNT2_REG, 0x134)
REGDEF_BEGIN(LVDS_CTLCOUNT2_REG)
REGDEF_BIT(FRMEND3_LINE_CNT, 16)
REGDEF_BIT(, 16)
REGDEF_END(LVDS_CTLCOUNT2_REG)

// 0x138 LVDS/HiSPi Control Counter Register 3
REGDEF_OFFSET(LVDS_CTLCOUNT3_REG, 0x138)
REGDEF_BEGIN(LVDS_CTLCOUNT3_REG)
REGDEF_BIT(FRMEND4_LINE_CNT, 16)
REGDEF_BIT(, 16)
REGDEF_END(LVDS_CTLCOUNT3_REG)


// 0x160 LVDS/HiSPi Pattern Gen Control Register
REGDEF_OFFSET(LVDS_PATGEN_REG, 0x160)
REGDEF_BEGIN(LVDS_PATGEN_REG)
REGDEF_BIT(PATGEN_EN, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(PATGEN_MODE, 3)
REGDEF_BIT(, 9)
REGDEF_BIT(PATGEN_VAL, 16)
REGDEF_END(LVDS_PATGEN_REG)


// 0x180 LVDS/HiSPi Debug Register 0
REGDEF_OFFSET(LVDS_DEBUG0_REG, 0x180)
REGDEF_BEGIN(LVDS_DEBUG0_REG)
REGDEF_BIT(ANALOG_BIT_ORDER, 1)
REGDEF_BIT(, 3)
REGDEF_BIT(AUTO_RST, 1)
REGDEF_BIT(, 11)
REGDEF_BIT(LINE_CNT, 14)
REGDEF_BIT(, 2)
REGDEF_END(LVDS_DEBUG0_REG)

REGDEF_OFFSET(LVDS_DEBUG1_REG, 0x184)
REGDEF_BEGIN(LVDS_DEBUG1_REG)
REGDEF_BIT(DL0_LOCK_LOC, 4)
REGDEF_BIT(DL1_LOCK_LOC, 4)
REGDEF_BIT(DL2_LOCK_LOC, 4)
REGDEF_BIT(DL3_LOCK_LOC, 4)
REGDEF_BIT(DL0_SKEW_LOCK,1)
REGDEF_BIT(DL1_SKEW_LOCK,1)
REGDEF_BIT(DL2_SKEW_LOCK,1)
REGDEF_BIT(DL3_SKEW_LOCK,1)
REGDEF_BIT(, 4)
REGDEF_BIT(EN_DELAY, 8)
REGDEF_END(LVDS_DEBUG1_REG)

// 0x1A0 Line End Control Word Register 0
REGDEF_OFFSET(LVDS_LE0_REG, 0x1A0)
REGDEF_BEGIN(LVDS_LE0_REG)
REGDEF_BIT(CTRL_W_LE0, 16)
REGDEF_BIT(CTRL_W_LE1, 16)
REGDEF_END(LVDS_LE0_REG)

// 0x1A4 Line End Control Word Register 1
REGDEF_OFFSET(LVDS_LE1_REG, 0x1A4)
REGDEF_BEGIN(LVDS_LE1_REG)
REGDEF_BIT(CTRL_W_LE2, 16)
REGDEF_BIT(CTRL_W_LE3, 16)
REGDEF_END(LVDS_LE1_REG)

// 0x1C0 Frame End Control Word Register 0
REGDEF_OFFSET(LVDS_D0FE_REG, 0x1C0)
REGDEF_OFFSET(LVDS_D1FE_REG, 0x1C8)
REGDEF_OFFSET(LVDS_D2FE_REG, 0x1D0)
REGDEF_OFFSET(LVDS_D3FE_REG, 0x1D8)
REGDEF_BEGIN(LVDS_FE_REG)
REGDEF_BIT(CTRL_W_FE, 16)
REGDEF_BIT(CTRL_W_FE2, 16)
REGDEF_END(LVDS_FE_REG)

REGDEF_OFFSET(LVDS_D0FE2_REG, 0x1C4)
REGDEF_OFFSET(LVDS_D1FE2_REG, 0x1CC)
REGDEF_OFFSET(LVDS_D2FE2_REG, 0x1D4)
REGDEF_OFFSET(LVDS_D3FE2_REG, 0x1DC)
REGDEF_BEGIN(LVDS_FE2_REG)
REGDEF_BIT(CTRL_W_FE3, 16)
REGDEF_BIT(CTRL_W_FE4, 16)
REGDEF_END(LVDS_FE2_REG)

#endif
